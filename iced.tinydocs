Crate iced




Iced is a cross-platform GUI library focused on simplicity and type-safety.
Inspired by Elm.

__________

Features


* Simple, easy-to-use, batteries-included API
* Type-safe, reactive programming model
* Cross-platform support (Windows, macOS, Linux, and the Web)
* Responsive layout
* Built-in widgets (including text inputs, scrollables, and more!)
* Custom widget support (create your own!)
* Debug overlay with performance metrics
* First-class support for async actions (use futures!)
* Modular ecosystem split into reusable parts:
  
  * A renderer-agnostic native runtime enabling integration with existing
    systems
  * A built-in renderer supporting Vulkan, Metal, DX11, and DX12
  * A windowing shell
  * A web runtime leveraging the DOM

Check out the repository and the examples for more details!

__________

Overview


Inspired by The Elm Architecture, Iced expects you to split user interfaces into
four different concepts:

* **State** — the state of your application
* **Messages** — user interactions or meaningful events that you care about
* **View logic** — a way to display your **state** as widgets that may produce
  **messages** on user interaction
* **Update logic** — a way to react to **messages** and update your **state**

We can build something to see how this works! Let’s say we want a simple counter
that can be incremented and decremented using two buttons.

We start by modelling the **state** of our application:

`struct Counter {
    // The counter value
    value: i32,
}`

Next, we need to define the possible user interactions of our counter: the
button presses. These interactions are our **messages**:

`#[derive(Debug, Clone, Copy)]
pub enum Message {
    IncrementPressed,
    DecrementPressed,
}`

Now, let’s show the actual counter by putting it all together in our **view
logic**:

`use iced::widget::{button, column, text, Column};

impl Counter {
    pub fn view(&mut self) -> Column<Message> {
        // We use a column: a simple vertical layout
        column![
            // The increment button. We tell it to produce an
            // `IncrementPressed` message when pressed
            button("+").on_press(Message::IncrementPressed),

            // We show the value of the counter here
            text(self.value).size(50),

            // The decrement button. We tell it to produce a
            // `DecrementPressed` message when pressed
            button("-").on_press(Message::DecrementPressed),
        ]
    }
}`

Finally, we need to be able to react to any produced **messages** and change our
**state** accordingly in our **update logic**:

`impl Counter {
    // ...

    pub fn update(&mut self, message: Message) {
        match message {
            Message::IncrementPressed => {
                self.value += 1;
            }
            Message::DecrementPressed => {
                self.value -= 1;
            }
        }
    }
}`

And that’s everything! We just wrote a whole user interface. Iced is now able
to:

1. Take the result of our **view logic** and layout its widgets.
2. Process events from our system and produce **messages** for our **update
   logic**.
3. Draw the resulting user interface.


__________

Usage


The `Application` and `Sandbox` traits should get you started quickly,
streamlining all the process described above!


__________

Re-exports


* `pub use application::Application;`
* `pub use settings::Settings;`
* `pub use runtime::futures;`


__________

Modules


* alignment
  Align and position widgets.
* application
  Build interactive cross-platform applications.
* clipboard
  Access the clipboard.
* event
  Handle events of a user interface.
* executor
  Choose your preferred executor to power your application.
* keyboard
  Listen and react to keyboard events.
* mouse
  Listen and react to mouse events.
* overlay
  Display interactive elements on top of other widgets.
* settings
  Configure your application.
* subscription
  Listen to external events in your application.
* theme
  Use the built-in theme and styles.
* time
  Listen and react to time.
* touch
  Listen and react to touch events.
* widget
  Display information and interactive controls in your application.
* window
  Configure the window of your application in native platforms.


__________

Macros


* color
  Creates a `Color` with shorter and cleaner syntax.


__________

Structs


* Color
  A color in the sRGB color space.
* Command
  A set of asynchronous actions to be performed by some runtime.
* Padding
  An amount of space to pad for each side of a box
* Point
  A 2D point.
* Rectangle
  A rectangle.
* Size
  An amount of space in 2 dimensions.
* Vector
  A 2D vector.


__________

Enums


* Alignment
  Alignment on the axis of a container.
* Background
  The background of some element.
* ContentFit
  The strategy used to fit the contents of a widget to its bounding box.
* Error
  An error that occurred while running an application.
* Event
  A user interface event.
* Font
  A font.
* Length
  The strategy used to fill space in a specific dimension.
* Theme
  A built-in theme.


__________

Traits


* Executor
  A type that can run futures.
* Sandbox
  A sandboxed `Application`.


__________

Type Definitions


* Element
  A generic widget.
* Renderer
  A `wgpu` graphics renderer for `iced`.
* Result
  The result of running an `Application`.
* Subscription
  A request to listen to external events.




==============
Enum iced::alignment::Alignment
`pub enum Alignment {
    Start,
    Center,
    End,
}`
Alignment on the axis of a container.
__________

Variants


Start

Align at the start of the axis.

Center

Align at the center of the axis.

End

Align at the end of the axis.
__________
__________

TRAITS:
impl Clone, impl Debug, impl From<Horizontal>, impl From<Vertical>, impl Hash
impl PartialEq<Alignment>, impl Copy, impl Eq, impl StructuralEq, impl StructuralPartialEq
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> CallHasher
impl<T> Downcast<T>, impl<Q, K> Equivalent<K>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>
impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::alignment::Horizontal
`pub enum Horizontal {
    Left,
    Center,
    Right,
}`
The horizontal `Alignment` of some resource.
__________

Variants


Left

Align left

Center

Horizontally centered

Right

Align right
__________
__________

TRAITS:
impl Clone, impl Debug, impl From<Horizontal>, impl Hash, impl PartialEq<Horizontal>
impl Copy, impl Eq, impl StructuralEq, impl StructuralPartialEq, impl RefUnwindSafe
impl Send, impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> CallHasher, impl<T> Downcast<T>
impl<Q, K> Equivalent<K>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::alignment::Vertical
`pub enum Vertical {
    Top,
    Center,
    Bottom,
}`
The vertical `Alignment` of some resource.
__________

Variants


Top

Align top

Center

Vertically centered

Bottom

Align bottom
__________
__________

TRAITS:
impl Clone, impl Debug, impl From<Vertical>, impl Hash, impl PartialEq<Vertical>
impl Copy, impl Eq, impl StructuralEq, impl StructuralPartialEq, impl RefUnwindSafe
impl Send, impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> CallHasher, impl<T> Downcast<T>
impl<Q, K> Equivalent<K>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::application::Appearance
[−]
`pub struct Appearance {
    pub background_color: Color,
    pub text_color: Color,
}`
The appearance of an application.
__________

Fields

`background_color: Color`

The background `Color` of the application.
`text_color: Color`

The default text `Color` of the application.
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<Appearance>, impl Copy, impl StructuralPartialEq
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Trait iced::application::Application


`pub trait Application: Sized {
    type Executor: Executor;
    type Message: Debug + Send;
    type Theme: Default + StyleSheet;
    type Flags;

    // Required methods
    fn new(flags: Self::Flags) -> (Self, Command<Self::Message>);
    fn title(&self) -> String;
    fn update(&mut self, message: Self::Message) -> Command<Self::Message>;
    fn view(&self) -> Element<'_, Self::Message, Renderer<Self::Theme>>;

    // Provided methods
    fn theme(&self) -> Self::Theme { ... }
    fn style(&self) -> <Self::Theme as StyleSheet>::Style { ... }
    fn subscription(&self) -> Subscription<Self::Message> { ... }
    fn scale_factor(&self) -> f64 { ... }
    fn run(settings: Settings<Self::Flags>) -> Result
       where Self: 'static { ... }
}`


An interactive cross-platform application.

This trait is the main entrypoint of Iced. Once implemented, you can run your
GUI application by simply calling `run`.

* On native platforms, it will run in its own window.
* On the web, it will take control of the `<title>` and the `<body>` of the
  document.

An `Application` can execute asynchronous actions by returning a `Command` in
some of its methods. If you do not intend to perform any background work in your
program, the `Sandbox` trait offers a simplified interface.

When using an `Application` with the `debug` feature enabled, a debug view can
be toggled by pressing `F12`.

__________

Examples


The repository has a bunch of examples that use the `Application` trait:

* `clock`, an application that uses the `Canvas` widget to draw a clock and its
  hands to display the current time.
* `download_progress`, a basic application that asynchronously downloads a dummy
  file of 100 MB and tracks the download progress.
* `events`, a log of native events displayed using a conditional `Subscription`.
* `game_of_life`, an interactive version of the [Game of Life], invented by
  [John Horton Conway].
* `pokedex`, an application that displays a random Pokédex entry (sprite
  included!) by using the PokéAPI.
* `solar_system`, an animated solar system drawn using the `Canvas` widget and
  showcasing how to compose different transforms.
* `stopwatch`, a watch with start/stop and reset buttons showcasing how to
  listen to time.
* `todos`, a todos tracker inspired by TodoMVC.


### A simple “Hello, world!”

If you just want to get started, here is a simple `Application` that says
“Hello, world!”:

`use iced::executor;
use iced::{Application, Command, Element, Settings, Theme};

pub fn main() -> iced::Result {
    Hello::run(Settings::default())
}

struct Hello;

impl Application for Hello {
    type Executor = executor::Default;
    type Flags = ();
    type Message = ();
    type Theme = Theme;

    fn new(_flags: ()) -> (Hello, Command<Self::Message>) {
        (Hello, Command::none())
    }

    fn title(&self) -> String {
        String::from("A cool application")
    }

    fn update(&mut self, _message: Self::Message) -> Command<Self::Message> {
        Command::none()
    }

    fn view(&self) -> Element<Self::Message> {
        "Hello, world!".into()
    }
}`


__________

Required Associated Types



type Executor: Executor

The `Executor` that will run commands and subscriptions.

The default executor can be a good starting point!


type Message: Debug + Send

The type of **messages** your `Application` will produce.


type Theme: Default + StyleSheet

The theme of your `Application`.


type Flags

The data needed to initialize your `Application`.


__________

Required Methods



fn new(flags: Self::Flags) -> (Self, Command<Self::Message>)

Initializes the `Application` with the flags provided to `run` as part of the
`Settings`.

Here is where you should return the initial state of your app.

Additionally, you can return a `Command` if you need to perform some async
action in the background on startup. This is useful if you want to load state
from a file, perform an initial HTTP request, etc.


fn title(&self) -> String

Returns the current title of the `Application`.

This title can be dynamic! The runtime will automatically update the title of
your application when necessary.


fn update(&mut self, message: Self::Message) -> Command<Self::Message>

Handles a **message** and updates the state of the `Application`.

This is where you define your **update logic**. All the **messages**, produced
by either user interactions or commands, will be handled by this method.

Any `Command` returned will be executed immediately in the background.


fn view(&self) -> Element<'_, Self::Message, Renderer<Self::Theme>>

Returns the widgets to display in the `Application`.

These widgets can produce **messages** based on user interaction.


__________

Provided Methods



fn theme(&self) -> Self::Theme

Returns the current `Theme` of the `Application`.


fn style(&self) -> <Self::Theme as StyleSheet>::Style

Returns the current `Style` of the `Theme`.


fn subscription(&self) -> Subscription<Self::Message>

Returns the event `Subscription` for the current state of the application.

A `Subscription` will be kept alive as long as you keep returning it, and the
**messages** produced will be handled by `update`.

By default, this method returns an empty `Subscription`.


fn scale_factor(&self) -> f64

Returns the scale factor of the `Application`.

It can be used to dynamically control the size of the UI at runtime (i.e.
zooming).

For instance, a scale factor of `2.0` will make widgets twice as big, while a
scale factor of `0.5` will shrink them to half their size.

By default, it returns `1.0`.


fn run(settings: Settings<Self::Flags>) -> Result where Self: 'static,

Runs the `Application`.

On native platforms, this method will take control of the current thread until
the `Application` exits.

On the web platform, this method **will NOT return** unless there is an `Error`
during startup.


__________

Implementors




impl<T> Application for T where T: Sandbox,

type Executor = Executor

type Flags = ()

type Message = <T as Sandbox>::Message

type Theme = Theme




==============
Trait iced::application::StyleSheet


[−]
`pub trait StyleSheet {
    type Style: Default;

    // Required method
    fn appearance(&self, style: &Self::Style) -> Appearance;
}`


A set of rules that dictate the style of an application.


__________

Required Associated Types



type Style: Default

The supported style of the `StyleSheet`.


__________

Required Methods



fn appearance(&self, style: &Self::Style) -> Appearance

Returns the `Appearance` of the application for the provided `Style`.


__________

Implementations on Foreign Types




impl StyleSheet for fn(_: &Theme) -> Appearance

type Style = Theme

fn appearance( &self, style: &<fn(_: &Theme) -> Appearance as StyleSheet>::Style
) -> Appearance


__________

Implementors




impl StyleSheet for Theme

type Style = Application




==============
Enum iced::Alignment
`pub enum Alignment {
    Start,
    Center,
    End,
}`
Alignment on the axis of a container.
__________

Variants


Start

Align at the start of the axis.

Center

Align at the center of the axis.

End

Align at the end of the axis.
__________
__________

TRAITS:
impl Clone, impl Debug, impl From<Horizontal>, impl From<Vertical>, impl Hash
impl PartialEq<Alignment>, impl Copy, impl Eq, impl StructuralEq, impl StructuralPartialEq
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> CallHasher
impl<T> Downcast<T>, impl<Q, K> Equivalent<K>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>
impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::Background
`pub enum Background {
    Color(Color),
}`
The background of some element.
__________

Variants


Color(Color)

A solid color
__________
__________

TRAITS:
impl Clone, impl Debug, impl From<Color>, impl PartialEq<Background>, impl Copy
impl StructuralPartialEq, impl RefUnwindSafe, impl Send, impl Sync, impl Unpin
impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::ContentFit
`pub enum ContentFit {
    Contain,
    Cover,
    Fill,
    None,
    ScaleDown,
}`
The strategy used to fit the contents of a widget to its bounding box.

Each variant of this enum is a strategy that can be applied for resolving
differences in aspect ratio and size between the image being displayed and the
space its being displayed in.

For an interactive demonstration of these properties as they are implemented in
CSS, see Mozilla’s docs, or run the `tour` example
__________

Variants


Contain

Scale as big as it can be without needing to crop or hide parts.

The image will be scaled (preserving aspect ratio) so that it just fits within
the window. This won’t distort the image or crop/hide any edges, but if the
image doesn’t fit perfectly, there may be whitespace on the top/bottom or
left/right.

This is a great fit for when you need to display an image without losing any
part of it, particularly when the image itself is the focus of the screen.

Cover

Scale the image to cover all of the bounding box, cropping if needed.

This doesn’t distort the image, and it ensures that the widget’s area is
completely covered, but it might crop off a bit of the edges of the widget,
particularly when there is a big difference between the aspect ratio of the
widget and the aspect ratio of the image.

This is best for when you’re using an image as a background, or to fill space,
and any details of the image around the edge aren’t too important.

Fill

Distort the image so the widget is 100% covered without cropping.

This stretches the image to fit the widget, without any whitespace or cropping.
However, because of the stretch, the image may look distorted or elongated,
particularly when there’s a mismatch of aspect ratios.

None

Don’t resize or scale the image at all.

This will not apply any transformations to the provided image, but also means
that unless you do the math yourself, the widget’s area will not be completely
covered, or the image might be cropped.

This is best for when you’ve sized the image yourself.

ScaleDown

Scale the image down if it’s too big for the space, but never scale it up.

This works much like `Contain`, except that if the image would have been scaled
up, it keeps its original resolution to avoid the bluring that accompanies
upscaling images.
__________
__________

IMPLEMENTATIONS:
impl ContentFit
pub fn fit(&self, content: Size<f32>, bounds: Size<f32>) -> Size<f32>

Attempt to apply the given fit for a content size within some bounds.

The returned value is the recommended scaled size of the content.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Hash, impl PartialEq<ContentFit>, impl Copy
impl Eq, impl StructuralEq, impl StructuralPartialEq, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> CallHasher, impl<T> Downcast<T>, impl<Q, K> Equivalent<K>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::Error
`pub enum Error {
    ExecutorCreationFailed(Error),
    WindowCreationFailed(Box<dyn Error + Send + Sync>),
    GraphicsCreationFailed(Error),
}`
An error that occurred while running an application.
__________

Variants


ExecutorCreationFailed(Error)

The futures executor could not be created.

WindowCreationFailed(Box<dyn Error + Send + Sync>)

The application window could not be created.

GraphicsCreationFailed(Error)

The application graphics context could not be created.
__________
__________

TRAITS:
impl Debug, impl Display, impl Error, impl From<Error>, impl !RefUnwindSafe
impl Send, impl Sync, impl Unpin, impl !UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<E> Provider
impl<T> ToString, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::Event
`pub enum Event {
    Keyboard(Event),
    Mouse(Event),
    Window(Event),
    Touch(Event),
}`
A user interface event.

***Note:** This type is largely incomplete! If you need to track additional
events, feel free to open an issue and share your use case!*
__________

Variants


Keyboard(Event)

A keyboard event

Mouse(Event)

A mouse event

Window(Event)

A window event

Touch(Event)

A touch event
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<Event>, impl StructuralPartialEq, impl RefUnwindSafe
impl Send, impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned
impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>
impl<T> MaybeSend




==============
Enum iced::Font
`pub enum Font {
    Default,
    External {
        name: &'static str,
        bytes: &'static [u8],
    },
}`
A font.
__________

Variants


Default

The default font.

This is normally a font configured in a renderer or loaded from the system.

External
#### Fields
`name: &'static str`

The name of the external font
`bytes: &'static [u8]`

The bytes of the external font

An external font.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Default, impl Copy, impl RefUnwindSafe
impl Send, impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<R, P> ReadPrimitive<R>
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::Length
`pub enum Length {
    Fill,
    FillPortion(u16),
    Shrink,
    Fixed(f32),
}`
The strategy used to fill space in a specific dimension.
__________

Variants


Fill

Fill all the remaining space

FillPortion(u16)

Fill a portion of the remaining space relative to other elements.

Let’s say we have two elements: one with `FillPortion(2)` and one with
`FillPortion(3)`. The first will get 2 portions of the available space, while
the second one would get 3.

`Length::Fill` is equivalent to `Length::FillPortion(1)`.

Shrink

Fill the least amount of space

Fixed(f32)

Fill a fixed amount of space
__________
__________

IMPLEMENTATIONS:
impl Length
pub fn fill_factor(&self) -> u16

Returns the *fill factor* of the `Length`.

The *fill factor* is a relative unit describing how much of the remaining space
should be filled when compared to other elements. It is only meant to be used by
layout engines.
__________
__________

TRAITS:
impl Clone, impl Debug, impl From<f32>, impl From<u16>, impl PartialEq<Length>
impl Copy, impl StructuralPartialEq, impl RefUnwindSafe, impl Send, impl Sync
impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>
impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::Theme
[−]
`pub enum Theme {
    Light,
    Dark,
    Custom(Box<Custom, Global>),
}`
A built-in theme.
__________

Variants


Light

The built-in light variant.

Dark

The built-in dark variant.

Custom(Box<Custom, Global>)

A `Theme` that uses a `Custom` palette.
__________
__________

IMPLEMENTATIONS:
impl Theme

pub fn custom(palette: Palette) -> Theme

Creates a new custom `Theme` from the given `Palette`.
pub fn palette(&self) -> Palette

Returns the `Palette` of the `Theme`.
pub fn extended_palette(&self) -> &Extended

Returns the `palette::Extended` of the `Theme`.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Default, impl PartialEq<Theme>, impl StyleSheet
impl StyleSheet, impl StyleSheet, impl StyleSheet, impl StyleSheet, impl StyleSheet
impl StyleSheet, impl StyleSheet, impl StyleSheet, impl StyleSheet, impl StyleSheet
impl StyleSheet, impl StyleSheet, impl StyleSheet, impl StyleSheet, impl StyleSheet
impl StructuralPartialEq, impl RefUnwindSafe, impl Send, impl Sync, impl Unpin
impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<R, P> ReadPrimitive<R>, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>
impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::event::Event
`pub enum Event {
    Keyboard(Event),
    Mouse(Event),
    Window(Event),
    Touch(Event),
}`
A user interface event.

***Note:** This type is largely incomplete! If you need to track additional
events, feel free to open an issue and share your use case!*
__________

Variants


Keyboard(Event)

A keyboard event

Mouse(Event)

A mouse event

Window(Event)

A window event

Touch(Event)

A touch event
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<Event>, impl StructuralPartialEq, impl RefUnwindSafe
impl Send, impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned
impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>
impl<T> MaybeSend




==============
Enum iced::event::Status
`pub enum Status {
    Ignored,
    Captured,
}`
The status of an `Event` after being processed.
__________

Variants


Ignored

The `Event` was **NOT** handled by any widget.

Captured

The `Event` was handled and processed by a widget.
__________
__________

IMPLEMENTATIONS:
impl Status
pub fn merge(self, b: Status) -> Status
Available on **crate feature `canvas`** only.

Merges two `Status` into one.

`Captured` takes precedence over `Ignored`:

`use iced_native::event::Status;

assert_eq!(Status::Ignored.merge(Status::Ignored), Status::Ignored);
assert_eq!(Status::Ignored.merge(Status::Captured), Status::Captured);
assert_eq!(Status::Captured.merge(Status::Ignored), Status::Captured);
assert_eq!(Status::Captured.merge(Status::Captured), Status::Captured);`
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<Status>, impl Copy, impl Eq
impl StructuralEq, impl StructuralPartialEq, impl RefUnwindSafe, impl Send, impl Sync
impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<Q, K> Equivalent<K>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Trait iced::executor::Executor


`pub trait Executor: Sized {
    // Required methods
    fn new() -> Result<Self, Error>
       where Self: Sized;
    fn spawn(&self, future: impl Future<Output = ()> + MaybeSend + 'static);

    // Provided method
    fn enter<R>(&self, f: impl FnOnce() -> R) -> R { ... }
}`


A type that can run futures.


__________

Required Methods



fn new() -> Result<Self, Error> where Self: Sized,

Creates a new `Executor`.


fn spawn(&self, future: impl Future<Output = ()> + MaybeSend + 'static)

Spawns a future in the `Executor`.


__________

Provided Methods



fn enter<R>(&self, f: impl FnOnce() -> R) -> R

Runs the given closure inside the `Executor`.

Some executors, like `tokio`, require some global state to be in place before
creating futures. This method can be leveraged to set up this global state, call
a function, restore the state, and obtain the result of the call.


__________

Implementations on Foreign Types




impl Executor for ThreadPool

fn new() -> Result<ThreadPool, Error>

fn spawn(&self, future: impl Future<Output = ()> + Send + 'static)


__________

Implementors




impl Executor for Executor




==============
Type Definition iced::executor::Default


`pub type Default = Executor;`


A default cross-platform executor.

* On native platforms, it will use:
  
  * `iced_futures::backend::native::tokio` when the `tokio` feature is enabled.
  * `iced_futures::backend::native::async-std` when the `async-std` feature is
    enabled.
  * `iced_futures::backend::native::smol` when the `smol` feature is enabled.
  * `iced_futures::backend::native::thread_pool` otherwise.
* On Wasm, it will use `iced_futures::backend::wasm::wasm_bindgen`.




==============
Enum iced::keyboard::Event
`pub enum Event {
    KeyPressed {
        key_code: KeyCode,
        modifiers: Modifiers,
    },
    KeyReleased {
        key_code: KeyCode,
        modifiers: Modifiers,
    },
    CharacterReceived(char),
    ModifiersChanged(Modifiers),
}`
A keyboard event.

***Note:** This type is largely incomplete! If you need to track additional
events, feel free to open an issue and share your use case!*
__________

Variants


KeyPressed
#### Fields
`key_code: KeyCode`

The key identifier
`modifiers: Modifiers`

The state of the modifier keys

A keyboard key was pressed.

KeyReleased
#### Fields
`key_code: KeyCode`

The key identifier
`modifiers: Modifiers`

The state of the modifier keys

A keyboard key was released.

CharacterReceived(char)

A unicode character was received.

ModifiersChanged(Modifiers)

The keyboard modifiers have changed.
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<Event>, impl Copy, impl Eq
impl StructuralEq, impl StructuralPartialEq, impl RefUnwindSafe, impl Send, impl Sync
impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<Q, K> Equivalent<K>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::keyboard::KeyCode
`pub enum KeyCode {
Show 163 variants    Key1,
    Key2,
    Key3,
    Key4,
    Key5,
    Key6,
    Key7,
    Key8,
    Key9,
    Key0,
    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,
    Escape,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    F13,
    F14,
    F15,
    F16,
    F17,
    F18,
    F19,
    F20,
    F21,
    F22,
    F23,
    F24,
    Snapshot,
    Scroll,
    Pause,
    Insert,
    Home,
    Delete,
    End,
    PageDown,
    PageUp,
    Left,
    Up,
    Right,
    Down,
    Backspace,
    Enter,
    Space,
    Compose,
    Caret,
    Numlock,
    Numpad0,
    Numpad1,
    Numpad2,
    Numpad3,
    Numpad4,
    Numpad5,
    Numpad6,
    Numpad7,
    Numpad8,
    Numpad9,
    NumpadAdd,
    NumpadDivide,
    NumpadDecimal,
    NumpadComma,
    NumpadEnter,
    NumpadEquals,
    NumpadMultiply,
    NumpadSubtract,
    AbntC1,
    AbntC2,
    Apostrophe,
    Apps,
    Asterisk,
    At,
    Ax,
    Backslash,
    Calculator,
    Capital,
    Colon,
    Comma,
    Convert,
    Equals,
    Grave,
    Kana,
    Kanji,
    LAlt,
    LBracket,
    LControl,
    LShift,
    LWin,
    Mail,
    MediaSelect,
    MediaStop,
    Minus,
    Mute,
    MyComputer,
    NavigateForward,
    NavigateBackward,
    NextTrack,
    NoConvert,
    OEM102,
    Period,
    PlayPause,
    Plus,
    Power,
    PrevTrack,
    RAlt,
    RBracket,
    RControl,
    RShift,
    RWin,
    Semicolon,
    Slash,
    Sleep,
    Stop,
    Sysrq,
    Tab,
    Underline,
    Unlabeled,
    VolumeDown,
    VolumeUp,
    Wake,
    WebBack,
    WebFavorites,
    WebForward,
    WebHome,
    WebRefresh,
    WebSearch,
    WebStop,
    Yen,
    Copy,
    Paste,
    Cut,
}`
The symbolic name of a keyboard key.

This is mostly the `KeyCode` type found in `winit`.
__________

Variants


Key1

The ‘1’ key over the letters.

Key2

The ‘2’ key over the letters.

Key3

The ‘3’ key over the letters.

Key4

The ‘4’ key over the letters.

Key5

The ‘5’ key over the letters.

Key6

The ‘6’ key over the letters.

Key7

The ‘7’ key over the letters.

Key8

The ‘8’ key over the letters.

Key9

The ‘9’ key over the letters.

Key0

The ‘0’ key over the ‘O’ and ‘P’ keys.

A

B

C

D

E

F

G

H

I

J

K

L

M

N

O

P

Q

R

S

T

U

V

W

X

Y

Z

Escape

The Escape key, next to F1.

F1

F2

F3

F4

F5

F6

F7

F8

F9

F10

F11

F12

F13

F14

F15

F16

F17

F18

F19

F20

F21

F22

F23

F24

Snapshot

Print Screen/SysRq.

Scroll

Scroll Lock.

Pause

Pause/Break key, next to Scroll lock.

Insert

`Insert`, next to Backspace.

Home

Delete

End

PageDown

PageUp

Left

Up

Right

Down

Backspace

The Backspace key, right over Enter.

Enter

The Enter key.

Space

The space bar.

Compose

The “Compose” key on Linux.

Caret

Numlock

Numpad0

Numpad1

Numpad2

Numpad3

Numpad4

Numpad5

Numpad6

Numpad7

Numpad8

Numpad9

NumpadAdd

NumpadDivide

NumpadDecimal

NumpadComma

NumpadEnter

NumpadEquals

NumpadMultiply

NumpadSubtract

AbntC1

AbntC2

Apostrophe

Apps

Asterisk

At

Ax

Backslash

Calculator

Capital

Colon

Comma

Convert

Equals

Grave

Kana

Kanji

LAlt

LBracket

LControl

LShift

LWin

Mail

MediaSelect

MediaStop

Minus

Mute

MyComputer

NavigateForward

NavigateBackward

NextTrack

NoConvert

OEM102

Period

PlayPause

Plus

Power

PrevTrack

RAlt

RBracket

RControl

RShift

RWin

Semicolon

Slash

Sleep

Stop

Sysrq

Tab

Underline

Unlabeled

VolumeDown

VolumeUp

Wake

WebBack

WebFavorites

WebForward

WebHome

WebRefresh

WebSearch

WebStop

Yen

Copy

Paste

Cut
__________
__________

TRAITS:
impl Clone, impl Debug, impl Hash, impl Ord, impl PartialEq<KeyCode>
impl PartialOrd<KeyCode>, impl Copy, impl Eq, impl StructuralEq, impl StructuralPartialEq
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> CallHasher
impl<T> Downcast<T>, impl<Q, K> Equivalent<K>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>
impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::keyboard::Modifiers
`pub struct Modifiers { /* private fields */ }`
The current state of the keyboard modifiers.
__________
__________

IMPLEMENTATIONS:
impl Modifiers
pub const SHIFT: Modifiers = Self{ bits: 4,}

The “shift” key.
pub const CTRL: Modifiers = Self{ bits: 4 << 3,}

The “control” key.
pub const ALT: Modifiers = Self{ bits: 4 << 6,}

The “alt” key.
pub const LOGO: Modifiers = Self{ bits: 4 << 9,}

The “windows” key on Windows, “command” key on Mac, and “super” key on Linux.
pub const fn empty() -> Modifiers

Returns an empty set of flags.
pub const fn all() -> Modifiers

Returns the set containing all flags.
pub const fn bits(&self) -> u32

Returns the raw value of the flags currently stored.
pub const fn from_bits(bits: u32) -> Option<Modifiers>

Convert from underlying bit representation, unless that representation contains
bits that do not correspond to a flag.
pub const fn from_bits_truncate(bits: u32) -> Modifiers

Convert from underlying bit representation, dropping any bits that do not
correspond to flags.
pub const unsafe fn from_bits_unchecked(bits: u32) -> Modifiers

Convert from underlying bit representation, preserving all bits (even those not
corresponding to a defined flag).

Safety

The caller of the `bitflags!` macro can chose to allow or disallow extra bits
for their bitflags type.

The caller of `from_bits_unchecked()` has to ensure that all bits correspond to
a defined flag or that extra bits are valid for this bitflags type.
pub const fn is_empty(&self) -> bool

Returns `true` if no flags are currently stored.
pub const fn is_all(&self) -> bool

Returns `true` if all flags are currently set.
pub const fn intersects(&self, other: Modifiers) -> bool

Returns `true` if there are flags common to both `self` and `other`.
pub const fn contains(&self, other: Modifiers) -> bool

Returns `true` if all of the flags in `other` are contained within `self`.
pub fn insert(&mut self, other: Modifiers)

Inserts the specified flags in-place.
pub fn remove(&mut self, other: Modifiers)

Removes the specified flags in-place.
pub fn toggle(&mut self, other: Modifiers)

Toggles the specified flags in-place.
pub fn set(&mut self, other: Modifiers, value: bool)

Inserts or removes the specified flags depending on the passed value.
pub const fn intersection(self, other: Modifiers) -> Modifiers

Returns the intersection between the flags in `self` and `other`.

Specifically, the returned set contains only the flags which are present in
*both* `self` *and* `other`.

This is equivalent to using the `&` operator (e.g. `ops::BitAnd`), as in `flags
& other`.
pub const fn union(self, other: Modifiers) -> Modifiers

Returns the union of between the flags in `self` and `other`.

Specifically, the returned set contains all flags which are present in *either*
`self` *or* `other`, including any which are present in both (see
`Self::symmetric_difference` if that is undesirable).

This is equivalent to using the `|` operator (e.g. `ops::BitOr`), as in `flags |
other`.
pub const fn difference(self, other: Modifiers) -> Modifiers

Returns the difference between the flags in `self` and `other`.

Specifically, the returned set contains all flags present in `self`, except for
the ones present in `other`.

It is also conceptually equivalent to the “bit-clear” operation: `flags &
!other` (and this syntax is also supported).

This is equivalent to using the `-` operator (e.g. `ops::Sub`), as in `flags -
other`.
pub const fn symmetric_difference(self, other: Modifiers) -> Modifiers

Returns the symmetric difference between the flags in `self` and `other`.

Specifically, the returned set contains the flags present which are present in
`self` or `other`, but that are not present in both. Equivalently, it contains
the flags present in *exactly one* of the sets `self` and `other`.

This is equivalent to using the `^` operator (e.g. `ops::BitXor`), as in `flags
^ other`.
pub const fn complement(self) -> Modifiers

Returns the complement of this set of flags.

Specifically, the returned set contains all the flags which are not set in
`self`, but which are allowed for this type.

Alternatively, it can be thought of as the set difference between `Self::all()`
and `self` (e.g. `Self::all() - self`)

This is equivalent to using the `!` operator (e.g. `ops::Not`), as in `!flags`.

impl Modifiers
pub const COMMAND: Modifiers =

The “command” key.

This is normally the main modifier to be used for hotkeys.

On macOS, this is equivalent to `Self::LOGO`. Ohterwise, this is equivalent to
`Self::CTRL`.
pub fn shift(self) -> bool

Returns true if the `SHIFT` key is pressed in the `Modifiers`.
pub fn control(self) -> bool

Returns true if the `CTRL` key is pressed in the `Modifiers`.
pub fn alt(self) -> bool

Returns true if the `ALT` key is pressed in the `Modifiers`.
pub fn logo(self) -> bool

Returns true if the `LOGO` key is pressed in the `Modifiers`.
pub fn command(self) -> bool

Returns true if a “command key” is pressed in the `Modifiers`.

The “command key” is the main modifier key used to issue commands in the current
platform. Specifically:

* It is the `logo` or command key (⌘) on macOS
* It is the `control` key on other platforms
__________
__________

TRAITS:
impl Binary, impl BitAnd<Modifiers>, impl BitAndAssign<Modifiers>, impl BitOr<Modifiers>, impl BitOrAssign<Modifiers>
impl BitXor<Modifiers>, impl BitXorAssign<Modifiers>, impl Clone, impl Debug, impl Default
impl Extend<Modifiers>, impl FromIterator<Modifiers>, impl Hash, impl LowerHex, impl Not
impl Octal, impl Ord, impl PartialEq<Modifiers>, impl PartialOrd<Modifiers>, impl Sub<Modifiers>
impl SubAssign<Modifiers>, impl UpperHex, impl Copy, impl Eq, impl StructuralEq
impl StructuralPartialEq, impl RefUnwindSafe, impl Send, impl Sync, impl Unpin
impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> CallHasher, impl<T> Downcast<T>, impl<Q, K> Equivalent<K>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> IsDefault, impl<T> Pointable, impl<R, P> ReadPrimitive<R>
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Macro iced::color


macro_rules! color {
    ($r:expr, $g:expr, $b:expr) => { ... };
    ($r:expr, $g:expr, $b:expr, $a:expr) => { ... };
    ($hex:expr) => { ... };
    ($hex:expr, $a:expr) => { ... };
}


Creates a `Color` with shorter and cleaner syntax.

__________

Examples


`assert_eq!(color!(0, 0, 0), Color::from_rgb(0., 0., 0.));
assert_eq!(color!(0, 0, 0, 0.), Color::from_rgba(0., 0., 0., 0.));
assert_eq!(color!(0xffffff), Color::from_rgb(1., 1., 1.));
assert_eq!(color!(0xffffff, 0.), Color::from_rgba(1., 1., 1., 0.));`




==============
Enum iced::mouse::Button
`pub enum Button {
    Left,
    Right,
    Middle,
    Other(u8),
}`
The button of a mouse.
__________

Variants


Left

The left mouse button.

Right

The right mouse button.

Middle

The middle (wheel) button.

Other(u8)

Some other button.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Hash, impl PartialEq<Button>, impl Copy
impl Eq, impl StructuralEq, impl StructuralPartialEq, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> CallHasher, impl<T> Downcast<T>, impl<Q, K> Equivalent<K>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::mouse::Event
`pub enum Event {
    CursorEntered,
    CursorLeft,
    CursorMoved {
        position: Point,
    },
    ButtonPressed(Button),
    ButtonReleased(Button),
    WheelScrolled {
        delta: ScrollDelta,
    },
}`
A mouse event.

***Note:** This type is largely incomplete! If you need to track additional
events, feel free to open an issue and share your use case!*
__________

Variants


CursorEntered

The mouse cursor entered the window.

CursorLeft

The mouse cursor left the window.

CursorMoved
#### Fields
`position: Point`

The new position of the mouse cursor

The mouse cursor was moved

ButtonPressed(Button)

A mouse button was pressed.

ButtonReleased(Button)

A mouse button was released.

WheelScrolled
#### Fields
`delta: ScrollDelta`

The scroll movement.

The mouse wheel was scrolled.
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<Event>, impl Copy, impl StructuralPartialEq
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::mouse::Interaction
`pub enum Interaction {
    Idle,
    Pointer,
    Grab,
    Text,
    Crosshair,
    Working,
    Grabbing,
    ResizingHorizontally,
    ResizingVertically,
    NotAllowed,
}`
The interaction of a mouse cursor.
__________

Variants


Idle

Pointer

Grab

Text

Crosshair

Working

Grabbing

ResizingHorizontally

ResizingVertically

NotAllowed
__________
__________

TRAITS:
impl Clone, impl Debug, impl Default, impl Ord, impl PartialEq<Interaction>
impl PartialOrd<Interaction>, impl Copy, impl Eq, impl StructuralEq, impl StructuralPartialEq
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>
impl<Q, K> Equivalent<K>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> IsDefault, impl<T> Pointable, impl<R, P> ReadPrimitive<R>, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::mouse::ScrollDelta
`pub enum ScrollDelta {
    Lines {
        x: f32,
        y: f32,
    },
    Pixels {
        x: f32,
        y: f32,
    },
}`
A scroll movement.
__________

Variants


Lines
#### Fields
`x: f32`

The number of horizontal lines scrolled
`y: f32`

The number of vertical lines scrolled

A line-based scroll movement

Pixels
#### Fields
`x: f32`

The number of horizontal pixels scrolled
`y: f32`

The number of vertical pixels scrolled

A pixel-based scroll movement
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<ScrollDelta>, impl Copy, impl StructuralPartialEq
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::overlay::menu::Appearance
[−]
`pub struct Appearance {
    pub text_color: Color,
    pub background: Background,
    pub border_width: f32,
    pub border_radius: f32,
    pub border_color: Color,
    pub selected_text_color: Color,
    pub selected_background: Background,
}`
The appearance of a menu.
__________

Fields

`text_color: Color`

The text `Color` of the menu.
`background: Background`

The `Background` of the menu.
`border_width: f32`

The border width of the menu.
`border_radius: f32`

The border radius of the menu.
`border_color: Color`

The border `Color` of the menu.
`selected_text_color: Color`

The text `Color` of a selected option in the menu.
`selected_background: Background`

The background `Color` of a selected option in the menu.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Copy, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::overlay::menu::State
`pub struct State { /* private fields */ }`
The local state of a `Menu`.
__________
__________

IMPLEMENTATIONS:
impl State
pub fn new() -> State

Creates a new `State` for a `Menu`.
__________
__________

TRAITS:
impl Debug, impl Default, impl !RefUnwindSafe, impl !Send, impl !Sync
impl Unpin, impl !UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<R, P> ReadPrimitive<R>, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>
impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>




==============
Trait iced::overlay::menu::StyleSheet


[−]
`pub trait StyleSheet {
    type Style: Default + Clone;

    // Required method
    fn appearance(&self, style: &Self::Style) -> Appearance;
}`


The style sheet of a menu.


__________

Required Associated Types



type Style: Default + Clone

The supported style of the `StyleSheet`.


__________

Required Methods



fn appearance(&self, style: &Self::Style) -> Appearance

Produces the `Appearance` of a menu.


__________

Implementors




impl StyleSheet for Theme

type Style = Menu




==============
Type Definition iced::overlay::menu::Menu


`pub type Menu<'a, Message, Renderer = Renderer> = Menu<'a, Message, Renderer>;`


A widget that produces a message when clicked.




==============
Type Definition iced::overlay::Element


`pub type Element<'a, Message, Renderer = Renderer> = Element<'a, Message, Rende
rer>;`


A generic `Overlay`.

This is an alias of an `iced_native` element with a default `Renderer`.




==============
Struct iced::settings::Settings
`pub struct Settings<Flags> {
    pub id: Option<String>,
    pub window: Settings,
    pub flags: Flags,
    pub default_font: Option<&'static [u8]>,
    pub default_text_size: f32,
    pub text_multithreading: bool,
    pub antialiasing: bool,
    pub exit_on_close_request: bool,
    pub try_opengles_first: bool,
}`
The settings of an application.
__________

Fields

`id: Option<String>`

The identifier of the application.

If provided, this identifier may be used to identify the application or
communicate with it through the windowing system.
`window: Settings`

The window settings.

They will be ignored on the Web.
`flags: Flags`

The data needed to initialize the `Application`.
`default_font: Option<&'static [u8]>`

The bytes of the font that will be used by default.

If `None` is provided, a default system font will be chosen.
`default_text_size: f32`

The text size that will be used by default.

The default value is `20.0`.
`text_multithreading: bool`

If enabled, spread text workload in multiple threads when multiple cores are
available.

By default, it is disabled.
`antialiasing: bool`

If set to true, the renderer will try to perform antialiasing for some
primitives.

Enabling it can produce a smoother result in some widgets, like the `Canvas`, at
a performance cost.

By default, it is disabled.
`exit_on_close_request: bool`

Whether the `Application` should exit when the user requests the window to close
(e.g. the user presses the close button).

By default, it is enabled.
`try_opengles_first: bool`

Whether the `Application` should try to build the context using OpenGL ES first
then OpenGL.

By default, it is disabled. **Note:** Only works for the `glow` backend.
__________
__________

IMPLEMENTATIONS:
impl<Flags> Settings<Flags>
pub fn with_flags(flags: Flags) -> Self

Initialize `Application` settings using the given data.
__________
__________

TRAITS:
impl<Flags: Clone> Clone, impl<Flags: Debug> Debug, impl<Flags> Default, impl<Flags> From<Settings<Flags>>, impl<Flags> RefUnwindSafe
impl<Flags> Send, impl<Flags> Sync, impl<Flags> Unpin, impl<Flags> UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<R, P> ReadPrimitive<R>
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::Color
`pub struct Color {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}`
A color in the sRGB color space.
__________

Fields

`r: f32`

Red component, 0.0 - 1.0
`g: f32`

Green component, 0.0 - 1.0
`b: f32`

Blue component, 0.0 - 1.0
`a: f32`

Transparency, 0.0 - 1.0
__________
__________

IMPLEMENTATIONS:
impl Color
pub const BLACK: Color = Color{ r: 0.0, g: 0.0, b: 0.0, a: 1.0,}

The black color.
pub const WHITE: Color = Color{ r: 1.0, g: 1.0, b: 1.0, a: 1.0,}

The white color.
pub const TRANSPARENT: Color = Color{ r: 0.0, g: 0.0, b: 0.0, a: 0.0,}

A color with no opacity.
pub fn new(r: f32, g: f32, b: f32, a: f32) -> Color

Creates a new `Color`.

In debug mode, it will panic if the values are not in the correct range: 0.0 -
1.0
pub const fn from_rgb(r: f32, g: f32, b: f32) -> Color

Creates a `Color` from its RGB components.
pub const fn from_rgba(r: f32, g: f32, b: f32, a: f32) -> Color

Creates a `Color` from its RGBA components.
pub fn from_rgb8(r: u8, g: u8, b: u8) -> Color

Creates a `Color` from its RGB8 components.
pub fn from_rgba8(r: u8, g: u8, b: u8, a: f32) -> Color

Creates a `Color` from its RGB8 components and an alpha value.
pub fn into_rgba8(self) -> [u8; 4]

Converts the `Color` into its RGBA8 equivalent.
pub fn into_linear(self) -> [f32; 4]

Converts the `Color` into its linear values.
pub fn invert(&mut self)

Inverts the `Color` in-place.
pub fn inverse(self) -> Color

Returns the inverted `Color`.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Default, impl From<[f32; 3]>, impl From<[f32; 4]>
impl From<Alpha<Rgb<Srgb, f32>, f32>>, impl From<Color>, impl From<Color>, impl From<Color>, impl From<Color>
impl From<Color>, impl From<Rgb<Srgb, f32>>, impl PartialEq<Color>, impl Copy, impl StructuralPartialEq
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> IsDefault
impl<T> Pointable, impl<R, P> ReadPrimitive<R>, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>
impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::Command
`pub struct Command<T>(_);`
A set of asynchronous actions to be performed by some runtime.
__________
__________

IMPLEMENTATIONS:
impl<T> Command<T>
pub const fn none() -> Command<T>

Creates an empty `Command`.

In other words, a `Command` that does nothing.
pub const fn single(action: Action<T>) -> Command<T>

Creates a `Command` that performs a single `Action`.
pub fn widget(operation: impl Operation<T> + 'static) -> Command<T>

Creates a `Command` that performs a `widget::Operation`.
pub fn perform<A>( future: impl Future<Output = T> + MaybeSend + 'static, f:
impl FnOnce(T) -> A + MaybeSend + 'static ) -> Command<A>

Creates a `Command` that performs the action of the given future.
pub fn batch(commands: impl IntoIterator<Item = Command<T>>) -> Command<T>

Creates a `Command` that performs the actions of all the given commands.

Once this command is run, all the commands will be executed at once.
pub fn map<A>( self, f: impl Fn(T) -> A + MaybeSend + Sync + Clone + 'static )
-> Command<A> where T: 'static, A: 'static,

Applies a transformation to the result of a `Command`.
pub fn actions(self) -> Vec<Action<T>, Global>

Returns all of the actions of the `Command`.
__________
__________

TRAITS:
impl<T> Debug, impl<T> !RefUnwindSafe, impl<T> !Send, impl<T> !Sync, impl<T> Unpin
impl<T> !UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>




==============
Struct iced::Padding
`pub struct Padding {
    pub top: f32,
    pub right: f32,
    pub bottom: f32,
    pub left: f32,
}`
An amount of space to pad for each side of a box

You can leverage the `From` trait to build `Padding` conveniently:

`let padding = Padding::from(20);              // 20px on all sides
let padding = Padding::from([10, 20]);        // top/bottom, left/right
let padding = Padding::from([5, 10, 15, 20]); // top, right, bottom, left`

Normally, the `padding` method of a widget will ask for an `Into<Padding>`, so
you can easily write:

`impl Widget {
    pub fn padding(mut self, padding: impl Into<Padding>) -> Self {
        // ...
        self
    }
}

let widget = Widget::new().padding(20);              // 20px on all sides
let widget = Widget::new().padding([10, 20]);        // top/bottom, left/right
let widget = Widget::new().padding([5, 10, 15, 20]); // top, right, bottom, left
`
__________

Fields

`top: f32`

Top padding
`right: f32`

Right padding
`bottom: f32`

Bottom padding
`left: f32`

Left padding
__________
__________

IMPLEMENTATIONS:
impl Padding
pub const ZERO: Padding = Padding{ top: 0.0, right: 0.0, bottom: 0.0, left:
0.0,}

Padding of zero
pub const fn new(padding: f32) -> Padding

Create a Padding that is equal on all sides
pub fn vertical(self) -> f32

Returns the total amount of vertical `Padding`.
pub fn horizontal(self) -> f32

Returns the total amount of horizontal `Padding`.
pub fn fit(self, inner: Size<f32>, outer: Size<f32>) -> Padding

Fits the `Padding` between the provided `inner` and `outer` `Size`.
__________
__________

TRAITS:
impl Clone, impl Debug, impl From<[f32; 2]>, impl From<[f32; 4]>, impl From<[u16; 2]>
impl From<[u16; 4]>, impl From<f32>, impl From<u16>, impl Copy, impl RefUnwindSafe
impl Send, impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned
impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>
impl<T> MaybeSend




==============
Struct iced::Point
`pub struct Point {
    pub x: f32,
    pub y: f32,
}`
A 2D point.
__________

Fields

`x: f32`

The X coordinate.
`y: f32`

The Y coordinate.
__________
__________

IMPLEMENTATIONS:
impl Point
pub const ORIGIN: Point = Point::new(0.0, 0.0)

The origin (i.e. a `Point` at (0, 0)).
pub const fn new(x: f32, y: f32) -> Point

Creates a new `Point` with the given coordinates.
pub fn distance(&self, to: Point) -> f32

Computes the distance to another `Point`.
__________
__________

TRAITS:
impl Add<Vector<f32>>, impl Clone, impl Debug, impl Default, impl From<[f32; 2]>
impl From<[u16; 2]>, impl PartialEq<Point>, impl Sub<Point>, impl Sub<Vector<f32>>, impl Copy
impl StructuralPartialEq, impl RefUnwindSafe, impl Send, impl Sync, impl Unpin
impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> IsDefault, impl<T> Pointable, impl<R, P> ReadPrimitive<R>, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::Rectangle
`pub struct Rectangle<T = f32> {
    pub x: T,
    pub y: T,
    pub width: T,
    pub height: T,
}`
A rectangle.
__________

Fields

`x: T`

X coordinate of the top-left corner.
`y: T`

Y coordinate of the top-left corner.
`width: T`

Width of the rectangle.
`height: T`

Height of the rectangle.
__________
__________

IMPLEMENTATIONS:
impl Rectangle<f32>
pub fn new(top_left: Point, size: Size<f32>) -> Rectangle<f32>

Creates a new `Rectangle` with its top-left corner in the given `Point` and with
the provided `Size`.
pub fn with_size(size: Size<f32>) -> Rectangle<f32>

Creates a new `Rectangle` with its top-left corner at the origin and with the
provided `Size`.
pub fn center(&self) -> Point

Returns the `Point` at the center of the `Rectangle`.
pub fn center_x(&self) -> f32

Returns the X coordinate of the `Point` at the center of the `Rectangle`.
pub fn center_y(&self) -> f32

Returns the Y coordinate of the `Point` at the center of the `Rectangle`.
pub fn position(&self) -> Point

Returns the position of the top left corner of the `Rectangle`.
pub fn size(&self) -> Size<f32>

Returns the `Size` of the `Rectangle`.
pub fn contains(&self, point: Point) -> bool

Returns true if the given `Point` is contained in the `Rectangle`.
pub fn intersection(&self, other: &Rectangle<f32>) -> Option<Rectangle<f32>>

Computes the intersection with the given `Rectangle`.
pub fn snap(self) -> Rectangle<u32>

Snaps the `Rectangle` to **unsigned** integer coordinates.
__________
__________

TRAITS:
impl<T> Add<Vector<T>>, impl<T> Clone, impl<T> Debug, impl<T> Default, impl From<Rectangle<u32>>
impl Mul<f32>, impl<T> PartialEq<Rectangle<T>>, impl<T> Copy, impl<T> Eq, impl<T> StructuralEq
impl<T> StructuralPartialEq, impl<T> RefUnwindSafe, impl<T> Send, impl<T> Sync, impl<T> Unpin
impl<T> UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<Q, K> Equivalent<K>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> IsDefault, impl<T> Pointable, impl<R, P> ReadPrimitive<R>, impl<T> ToOwned
impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>
impl<T> MaybeSend




==============
Struct iced::Size
`pub struct Size<T = f32> {
    pub width: T,
    pub height: T,
}`
An amount of space in 2 dimensions.
__________

Fields

`width: T`

The width.
`height: T`

The height.
__________
__________

IMPLEMENTATIONS:
impl<T> Size<T>
pub const fn new(width: T, height: T) -> Size<T>

Creates a new `Size` with the given width and height.

impl Size<f32>
pub const ZERO: Size<f32> = Size::new(0., 0.)

A `Size` with zero width and height.
pub const UNIT: Size<f32> = Size::new(1., 1.)

A `Size` with a width and height of 1 unit.
pub const INFINITY: Size<f32> = Size::new(f32::INFINITY, f32::INFINITY)

A `Size` with infinite width and height.
pub fn pad(&self, padding: Padding) -> Size<f32>

Increments the `Size` to account for the given padding.
pub fn min(self, other: Size<f32>) -> Size<f32>

Returns the minimum of each component of this size and another
pub fn max(self, other: Size<f32>) -> Size<f32>

Returns the maximum of each component of this size and another
__________
__________

TRAITS:
impl<T> Clone, impl<T> Debug, impl From<[f32; 2]>, impl From<[u16; 2]>, impl From<Size<f32>>
impl From<Vector<f32>>, impl<T> PartialEq<Size<T>>, impl Sub<Size<f32>>, impl<T> Copy, impl<T> Eq
impl<T> StructuralEq, impl<T> StructuralPartialEq, impl<T> RefUnwindSafe, impl<T> Send, impl<T> Sync
impl<T> Unpin, impl<T> UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<Q, K> Equivalent<K>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::Vector
`pub struct Vector<T = f32> {
    pub x: T,
    pub y: T,
}`
A 2D vector.
__________

Fields

`x: T`

The X component of the `Vector`
`y: T`

The Y component of the `Vector`
__________
__________

IMPLEMENTATIONS:
impl<T> Vector<T>
pub const fn new(x: T, y: T) -> Vector<T>

Creates a new `Vector` with the given components.

impl Vector<f32>
pub const ZERO: Vector<f32> = Self::new(0.0, 0.0)

The zero `Vector`.
__________
__________

TRAITS:
impl<T> Add<Vector<T>>, impl<T> Add<Vector<T>>, impl Add<Vector<f32>>, impl<T> Clone, impl<T> Debug
impl<T> Default, impl<T> From<[T; 2]>, impl From<Size<f32>>, impl From<Vector<f32>>, impl<T> Mul<T>
impl<T> PartialEq<Vector<T>>, impl<T> Sub<Vector<T>>, impl Sub<Vector<f32>>, impl<T> Copy, impl<T> Eq
impl<T> StructuralEq, impl<T> StructuralPartialEq, impl<T> RefUnwindSafe, impl<T> Send, impl<T> Sync
impl<T> Unpin, impl<T> UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<Q, K> Equivalent<K>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> IsDefault, impl<T> Pointable, impl<R, P> ReadPrimitive<R>
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Trait iced::subscription::Recipe


`pub trait Recipe<Hasher, Event> where
    Hasher: Hasher,{
    type Output;

    // Required methods
    fn hash(&self, state: &mut Hasher);
    fn stream(
        self: Box<Self, Global>,
        input: Pin<Box<dyn Stream<Item = Event> + Send + 'static, Global>>
    ) -> Pin<Box<dyn Stream<Item = Self::Output> + Send + 'static, Global>>;
}`


The description of a `Subscription`.

A `Recipe` is the internal definition of a `Subscription`. It is used by
runtimes to run and identify subscriptions. You can use it to create your own!

__________

Examples


The repository has a couple of examples that use a custom `Recipe`:

* `download_progress`, a basic application that asynchronously downloads a dummy
  file of 100 MB and tracks the download progress.
* `stopwatch`, a watch with start/stop and reset buttons showcasing how to
  listen to time.


__________

Required Associated Types



type Output

The events that will be produced by a `Subscription` with this `Recipe`.


__________

Required Methods



fn hash(&self, state: &mut Hasher)

Hashes the `Recipe`.

This is used by runtimes to uniquely identify a `Subscription`.


fn stream( self: Box<Self, Global>, input: Pin<Box<dyn Stream<Item = Event> +
Send + 'static, Global>> ) -> Pin<Box<dyn Stream<Item = Self::Output> + Send +
'static, Global>>

Executes the `Recipe` and produces the stream of events of its `Subscription`.

It receives some stream of generic events, which is normally defined by shells.


__________

Implementors




==============
Type Definition iced::subscription::EventStream


`pub type EventStream = Pin<Box<dyn Stream<Item = (Event, Status)> + Send + 'sta
tic, Global>>;`


A stream of runtime events.

It is the input of a `Subscription` in the native runtime.




==============
Type Definition iced::subscription::Subscription


`pub type Subscription<T> = Subscription<Hasher, (Event, Status), T>;`


A request to listen to external events.

Besides performing async actions on demand with `Command`, most applications
also need to listen to external events passively.

A `Subscription` is normally provided to some runtime, like a `Command`, and it
will generate events as long as the user keeps requesting it.

For instance, you can use a `Subscription` to listen to a WebSocket connection,
keyboard presses, mouse events, time ticks, etc.




==============
Type Definition iced::subscription::Tracker


`pub type Tracker = Tracker<Hasher, (Event, Status)>;`


A native `Subscription` tracker.




==============
Enum iced::theme::Application
[−]
`pub enum Application {
    Default,
    Custom(Box<dyn StyleSheet<Style = Theme> + 'static, Global>),
}`
The style of an application.
__________

Variants


Default

The default style.

Custom(Box<dyn StyleSheet<Style = Theme> + 'static, Global>)

A custom style.
__________
__________

TRAITS:
impl Default, impl From<fn(_: &Theme) -> Appearance>, impl !RefUnwindSafe, impl !Send, impl !Sync
impl Unpin, impl !UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<R, P> ReadPrimitive<R>, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>
impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>




==============
Enum iced::theme::Button
[−]
`pub enum Button {
    Primary,
    Secondary,
    Positive,
    Destructive,
    Text,
    Custom(Box<dyn StyleSheet<Style = Theme> + 'static, Global>),
}`
The style of a button.
__________

Variants


Primary

The primary style.

Secondary

The secondary style.

Positive

The positive style.

Destructive

The destructive style.

Text

The text style.

Useful for links!

Custom(Box<dyn StyleSheet<Style = Theme> + 'static, Global>)

A custom style.
__________
__________

TRAITS:
impl Default, impl !RefUnwindSafe, impl !Send, impl !Sync, impl Unpin
impl !UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<R, P> ReadPrimitive<R>, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>




==============
Enum iced::theme::Checkbox
[−]
`pub enum Checkbox {
    Primary,
    Secondary,
    Success,
    Danger,
    Custom(Box<dyn StyleSheet<Style = Theme> + 'static, Global>),
}`
The style of a checkbox.
__________

Variants


Primary

The primary style.

Secondary

The secondary style.

Success

The success style.

Danger

The danger style.

Custom(Box<dyn StyleSheet<Style = Theme> + 'static, Global>)

A custom style.
__________
__________

TRAITS:
impl Default, impl !RefUnwindSafe, impl !Send, impl !Sync, impl Unpin
impl !UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<R, P> ReadPrimitive<R>, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>




==============
Enum iced::theme::Container
[−]
`pub enum Container {
    Transparent,
    Box,
    Custom(Box<dyn StyleSheet<Style = Theme> + 'static, Global>),
}`
The style of a container.
__________

Variants


Transparent

No style.

Box

A simple box.

Custom(Box<dyn StyleSheet<Style = Theme> + 'static, Global>)

A custom style.
__________
__________

TRAITS:
impl Default, impl From<fn(_: &Theme) -> Appearance>, impl !RefUnwindSafe, impl !Send, impl !Sync
impl Unpin, impl !UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<R, P> ReadPrimitive<R>, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>
impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>




==============
Enum iced::theme::Menu
[−]
`pub enum Menu {
    Default,
    Custom(Rc<dyn StyleSheet<Style = Theme> + 'static>),
}`
The style of a menu.
__________

Variants


Default

The default style.

Custom(Rc<dyn StyleSheet<Style = Theme> + 'static>)

A custom style.
__________
__________

TRAITS:
impl Clone, impl Default, impl From<PickList>, impl !RefUnwindSafe, impl !Send
impl !Sync, impl Unpin, impl !UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<R, P> ReadPrimitive<R>, impl<T> ToOwned
impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>




==============
Enum iced::theme::PaneGrid
[−]
`pub enum PaneGrid {
    Default,
    Custom(Box<dyn StyleSheet<Style = Theme> + 'static, Global>),
}`
The style of a pane grid.
__________

Variants


Default

The default style.

Custom(Box<dyn StyleSheet<Style = Theme> + 'static, Global>)

A custom style.
__________
__________

TRAITS:
impl Default, impl !RefUnwindSafe, impl !Send, impl !Sync, impl Unpin
impl !UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<R, P> ReadPrimitive<R>, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>




==============
Enum iced::theme::PickList
[−]
`pub enum PickList {
    Default,
    Custom(Rc<dyn StyleSheet<Style = Theme> + 'static>, Rc<dyn StyleSheet<Style 
= Theme> + 'static>),
}`
The style of a pick list.
__________

Variants


Default

The default style.

Custom(Rc<dyn StyleSheet<Style = Theme> + 'static>, Rc<dyn StyleSheet<Style =
Theme> + 'static>)

A custom style.
__________
__________

TRAITS:
impl Clone, impl Default, impl From<PickList>, impl !RefUnwindSafe, impl !Send
impl !Sync, impl Unpin, impl !UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<R, P> ReadPrimitive<R>, impl<T> ToOwned
impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>




==============
Enum iced::theme::ProgressBar
[−]
`pub enum ProgressBar {
    Primary,
    Success,
    Danger,
    Custom(Box<dyn StyleSheet<Style = Theme> + 'static, Global>),
}`
The style of a progress bar.
__________

Variants


Primary

The primary style.

Success

The success style.

Danger

The danger style.

Custom(Box<dyn StyleSheet<Style = Theme> + 'static, Global>)

A custom style.
__________
__________

TRAITS:
impl Default, impl From<fn(_: &Theme) -> Appearance>, impl !RefUnwindSafe, impl !Send, impl !Sync
impl Unpin, impl !UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<R, P> ReadPrimitive<R>, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>
impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>




==============
Enum iced::theme::Radio
[−]
`pub enum Radio {
    Default,
    Custom(Box<dyn StyleSheet<Style = Theme> + 'static, Global>),
}`
The style of a radio button.
__________

Variants


Default

The default style.

Custom(Box<dyn StyleSheet<Style = Theme> + 'static, Global>)

A custom style.
__________
__________

TRAITS:
impl Default, impl !RefUnwindSafe, impl !Send, impl !Sync, impl Unpin
impl !UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<R, P> ReadPrimitive<R>, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>




==============
Enum iced::theme::Rule
[−]
`pub enum Rule {
    Default,
    Custom(Box<dyn StyleSheet<Style = Theme> + 'static, Global>),
}`
The style of a rule.
__________

Variants


Default

The default style.

Custom(Box<dyn StyleSheet<Style = Theme> + 'static, Global>)

A custom style.
__________
__________

TRAITS:
impl Default, impl From<fn(_: &Theme) -> Appearance>, impl !RefUnwindSafe, impl !Send, impl !Sync
impl Unpin, impl !UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<R, P> ReadPrimitive<R>, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>
impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>




==============
Enum iced::theme::Scrollable
[−]
`pub enum Scrollable {
    Default,
    Custom(Box<dyn StyleSheet<Style = Theme> + 'static, Global>),
}`
The style of a scrollable.
__________

Variants


Default

The default style.

Custom(Box<dyn StyleSheet<Style = Theme> + 'static, Global>)

A custom style.
__________
__________

IMPLEMENTATIONS:
impl Scrollable

pub fn custom<T>(style: T) -> Scrollable where T: StyleSheet<Style = Theme> +
'static,

Creates a custom `Scrollable` theme.
__________
__________

TRAITS:
impl Default, impl !RefUnwindSafe, impl !Send, impl !Sync, impl Unpin
impl !UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<R, P> ReadPrimitive<R>, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>




==============
Enum iced::theme::Slider
[−]
`pub enum Slider {
    Default,
    Custom(Box<dyn StyleSheet<Style = Theme> + 'static, Global>),
}`
The style of a slider.
__________

Variants


Default

The default style.

Custom(Box<dyn StyleSheet<Style = Theme> + 'static, Global>)

A custom style.
__________
__________

TRAITS:
impl Default, impl !RefUnwindSafe, impl !Send, impl !Sync, impl Unpin
impl !UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<R, P> ReadPrimitive<R>, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>




==============
Enum iced::theme::Svg
[−]
`pub enum Svg {
    Default,
    Custom(Box<dyn StyleSheet<Style = Theme> + 'static, Global>),
}`
Svg
__________

Variants


Default

No filtering to the rendered SVG.

Custom(Box<dyn StyleSheet<Style = Theme> + 'static, Global>)

A custom style.
__________
__________

IMPLEMENTATIONS:
impl Svg

pub fn custom_fn(f: fn(_: &Theme) -> Appearance) -> Svg

Creates a custom `Svg` style.
__________
__________

TRAITS:
impl Default, impl !RefUnwindSafe, impl !Send, impl !Sync, impl Unpin
impl !UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<R, P> ReadPrimitive<R>, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>




==============
Enum iced::theme::Text
[−]
`pub enum Text {
    Default,
    Color(Color),
}`
The style of text.
__________

Variants


Default

The default style.

Color(Color)

Colored text.
__________
__________

TRAITS:
impl Clone, impl Default, impl From<Color>, impl Copy, impl RefUnwindSafe
impl Send, impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<R, P> ReadPrimitive<R>
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::theme::TextInput
[−]
`pub enum TextInput {
    Default,
    Custom(Box<dyn StyleSheet<Style = Theme> + 'static, Global>),
}`
The style of a text input.
__________

Variants


Default

The default style.

Custom(Box<dyn StyleSheet<Style = Theme> + 'static, Global>)

A custom style.
__________
__________

TRAITS:
impl Default, impl !RefUnwindSafe, impl !Send, impl !Sync, impl Unpin
impl !UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<R, P> ReadPrimitive<R>, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>




==============
Enum iced::theme::Theme
[−]
`pub enum Theme {
    Light,
    Dark,
    Custom(Box<Custom, Global>),
}`
A built-in theme.
__________

Variants


Light

The built-in light variant.

Dark

The built-in dark variant.

Custom(Box<Custom, Global>)

A `Theme` that uses a `Custom` palette.
__________
__________

IMPLEMENTATIONS:
impl Theme

pub fn custom(palette: Palette) -> Theme

Creates a new custom `Theme` from the given `Palette`.
pub fn palette(&self) -> Palette

Returns the `Palette` of the `Theme`.
pub fn extended_palette(&self) -> &Extended

Returns the `palette::Extended` of the `Theme`.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Default, impl PartialEq<Theme>, impl StyleSheet
impl StyleSheet, impl StyleSheet, impl StyleSheet, impl StyleSheet, impl StyleSheet
impl StyleSheet, impl StyleSheet, impl StyleSheet, impl StyleSheet, impl StyleSheet
impl StyleSheet, impl StyleSheet, impl StyleSheet, impl StyleSheet, impl StyleSheet
impl StructuralPartialEq, impl RefUnwindSafe, impl Send, impl Sync, impl Unpin
impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<R, P> ReadPrimitive<R>, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>
impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::theme::Toggler
[−]
`pub enum Toggler {
    Default,
    Custom(Box<dyn StyleSheet<Style = Theme> + 'static, Global>),
}`
The style of a toggler.
__________

Variants


Default

The default style.

Custom(Box<dyn StyleSheet<Style = Theme> + 'static, Global>)

A custom style.
__________
__________

TRAITS:
impl Default, impl !RefUnwindSafe, impl !Send, impl !Sync, impl Unpin
impl !UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<R, P> ReadPrimitive<R>, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>




==============
Struct iced::theme::palette::Background
[−]
`pub struct Background {
    pub base: Pair,
    pub weak: Pair,
    pub strong: Pair,
}`
A set of background colors.
__________

Fields

`base: Pair`

The base background color.
`weak: Pair`

A weaker version of the base background color.
`strong: Pair`

A stronger version of the base background color.
__________
__________

IMPLEMENTATIONS:
impl Background

pub fn new(base: Color, text: Color) -> Background

Generates a set of `Background` colors from the base and text colors.
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<Background>, impl Copy, impl StructuralPartialEq
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::theme::palette::Danger
[−]
`pub struct Danger {
    pub base: Pair,
    pub weak: Pair,
    pub strong: Pair,
}`
A set of danger colors.
__________

Fields

`base: Pair`

The base danger color.
`weak: Pair`

A weaker version of the base danger color.
`strong: Pair`

A stronger version of the base danger color.
__________
__________

IMPLEMENTATIONS:
impl Danger

pub fn generate(base: Color, background: Color, text: Color) -> Danger

Generates a set of `Danger` colors from the base, background, and text colors.
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<Danger>, impl Copy, impl StructuralPartialEq
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::theme::palette::Extended
[−]
`pub struct Extended {
    pub background: Background,
    pub primary: Primary,
    pub secondary: Secondary,
    pub success: Success,
    pub danger: Danger,
}`
An extended set of colors generated from a `Palette`.
__________

Fields

`background: Background`

The set of background colors.
`primary: Primary`

The set of primary colors.
`secondary: Secondary`

The set of secondary colors.
`success: Success`

The set of success colors.
`danger: Danger`

The set of danger colors.
__________
__________

IMPLEMENTATIONS:
impl Extended

pub fn generate(palette: Palette) -> Extended

Generates an `Extended` palette from a simple `Palette`.
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<Extended>, impl Copy, impl StructuralPartialEq
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::theme::palette::Pair
[−]
`pub struct Pair {
    pub color: Color,
    pub text: Color,
}`
A pair of background and text colors.
__________

Fields

`color: Color`

The background color.
`text: Color`

The text color.

It’s guaranteed to be readable on top of the background `color`.
__________
__________

IMPLEMENTATIONS:
impl Pair

pub fn new(color: Color, text: Color) -> Pair

Creates a new `Pair` from a background `Color` and some text `Color`.
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<Pair>, impl Copy, impl StructuralPartialEq
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::theme::palette::Palette
[−]
`pub struct Palette {
    pub background: Color,
    pub text: Color,
    pub primary: Color,
    pub success: Color,
    pub danger: Color,
}`
A color palette.
__________

Fields

`background: Color`

The background `Color` of the `Palette`.
`text: Color`

The text `Color` of the `Palette`.
`primary: Color`

The primary `Color` of the `Palette`.
`success: Color`

The success `Color` of the `Palette`.
`danger: Color`

The danger `Color` of the `Palette`.
__________
__________

IMPLEMENTATIONS:
impl Palette

pub const LIGHT: Palette = Self{ background: Color::WHITE, text: Color::BLACK,
primary: Color::from_rgb(94 as f32 / 255.0, 124 as f32 / 255.0, 226 as f32 /
255.0), success: Color::from_rgb(18 as f32 / 255.0, 102 as f32 / 255.0, 79 as
f32 / 255.0), danger: Color::from_rgb(195 as f32 / 255.0, 66 as f32 / 255.0, 63
as f32 / 255.0),}

The built-in light variant of a `Palette`.
pub const DARK: Palette = Self{ background: Color::from_rgb(32 as f32 / 255.0,
34 as f32 / 255.0, 37 as f32 / 255.0), text: Color::from_rgb(0.90, 0.90, 0.90),
primary: Color::from_rgb(94 as f32 / 255.0, 124 as f32 / 255.0, 226 as f32 /
255.0), success: Color::from_rgb(18 as f32 / 255.0, 102 as f32 / 255.0, 79 as
f32 / 255.0), danger: Color::from_rgb(195 as f32 / 255.0, 66 as f32 / 255.0, 63
as f32 / 255.0),}

The built-in dark variant of a `Palette`.
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<Palette>, impl Copy, impl StructuralPartialEq
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::theme::palette::Primary
[−]
`pub struct Primary {
    pub base: Pair,
    pub weak: Pair,
    pub strong: Pair,
}`
A set of primary colors.
__________

Fields

`base: Pair`

The base primary color.
`weak: Pair`

A weaker version of the base primary color.
`strong: Pair`

A stronger version of the base primary color.
__________
__________

IMPLEMENTATIONS:
impl Primary

pub fn generate(base: Color, background: Color, text: Color) -> Primary

Generates a set of `Primary` colors from the base, background, and text colors.
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<Primary>, impl Copy, impl StructuralPartialEq
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::theme::palette::Secondary
[−]
`pub struct Secondary {
    pub base: Pair,
    pub weak: Pair,
    pub strong: Pair,
}`
A set of secondary colors.
__________

Fields

`base: Pair`

The base secondary color.
`weak: Pair`

A weaker version of the base secondary color.
`strong: Pair`

A stronger version of the base secondary color.
__________
__________

IMPLEMENTATIONS:
impl Secondary

pub fn generate(base: Color, text: Color) -> Secondary

Generates a set of `Secondary` colors from the base and text colors.
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<Secondary>, impl Copy, impl StructuralPartialEq
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::theme::palette::Success
[−]
`pub struct Success {
    pub base: Pair,
    pub weak: Pair,
    pub strong: Pair,
}`
A set of success colors.
__________

Fields

`base: Pair`

The base success color.
`weak: Pair`

A weaker version of the base success color.
`strong: Pair`

A stronger version of the base success color.
__________
__________

IMPLEMENTATIONS:
impl Success

pub fn generate(base: Color, background: Color, text: Color) -> Success

Generates a set of `Success` colors from the base, background, and text colors.
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<Success>, impl Copy, impl StructuralPartialEq
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::theme::Custom
[−]
`pub struct Custom { /* private fields */ }`
A `Theme` with a customized `Palette`.
__________
__________

IMPLEMENTATIONS:
impl Custom

pub fn new(palette: Palette) -> Custom

Creates a `Custom` theme from the given `Palette`.
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<Custom>, impl Copy, impl StructuralPartialEq
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::theme::Palette
[−]
`pub struct Palette {
    pub background: Color,
    pub text: Color,
    pub primary: Color,
    pub success: Color,
    pub danger: Color,
}`
A color palette.
__________

Fields

`background: Color`

The background `Color` of the `Palette`.
`text: Color`

The text `Color` of the `Palette`.
`primary: Color`

The primary `Color` of the `Palette`.
`success: Color`

The success `Color` of the `Palette`.
`danger: Color`

The danger `Color` of the `Palette`.
__________
__________

IMPLEMENTATIONS:
impl Palette

pub const LIGHT: Palette = Self{ background: Color::WHITE, text: Color::BLACK,
primary: Color::from_rgb(94 as f32 / 255.0, 124 as f32 / 255.0, 226 as f32 /
255.0), success: Color::from_rgb(18 as f32 / 255.0, 102 as f32 / 255.0, 79 as
f32 / 255.0), danger: Color::from_rgb(195 as f32 / 255.0, 66 as f32 / 255.0, 63
as f32 / 255.0),}

The built-in light variant of a `Palette`.
pub const DARK: Palette = Self{ background: Color::from_rgb(32 as f32 / 255.0,
34 as f32 / 255.0, 37 as f32 / 255.0), text: Color::from_rgb(0.90, 0.90, 0.90),
primary: Color::from_rgb(94 as f32 / 255.0, 124 as f32 / 255.0, 226 as f32 /
255.0), success: Color::from_rgb(18 as f32 / 255.0, 102 as f32 / 255.0, 79 as
f32 / 255.0), danger: Color::from_rgb(195 as f32 / 255.0, 66 as f32 / 255.0, 63
as f32 / 255.0),}

The built-in dark variant of a `Palette`.
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<Palette>, impl Copy, impl StructuralPartialEq
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::time::Duration

1.3.0 · 
`pub struct Duration { /* private fields */ }`
A `Duration` type to represent a span of time, typically used for system
timeouts.

Each `Duration` is composed of a whole number of seconds and a fractional part
represented in nanoseconds. If the underlying system does not support
nanosecond-level precision, APIs binding a system timeout will typically round
up the number of nanoseconds.

`Duration`s implement many common traits, including `Add`, `Sub`, and other
`ops` traits. It implements `Default` by returning a zero-length `Duration`.

__________

Examples
`use std::time::Duration;

let five_seconds = Duration::new(5, 0);
let five_seconds_and_five_nanos = five_seconds + Duration::new(0, 5);

assert_eq!(five_seconds_and_five_nanos.as_secs(), 5);
assert_eq!(five_seconds_and_five_nanos.subsec_nanos(), 5);

let ten_millis = Duration::from_millis(10);`
__________

Formatting `Duration` values
`Duration` intentionally does not have a `Display` impl, as there are a variety
of ways to format spans of time for human readability. `Duration` provides a
`Debug` impl that shows the full precision of the value.

The `Debug` output uses the non-ASCII “µs” suffix for microseconds. If your
program output may appear in contexts that cannot rely on full Unicode
compatibility, you may wish to format `Duration` objects yourself or use a crate
to do so.
__________
__________

IMPLEMENTATIONS:
impl Duration
pub const SECOND: Duration = Duration::from_secs(1)
🔬This is a nightly-only experimental API. (`duration_constants`)

The duration of one second.

Examples
`#![feature(duration_constants)]
use std::time::Duration;

assert_eq!(Duration::SECOND, Duration::from_secs(1));`
pub const MILLISECOND: Duration = Duration::from_millis(1)
🔬This is a nightly-only experimental API. (`duration_constants`)

The duration of one millisecond.

Examples
`#![feature(duration_constants)]
use std::time::Duration;

assert_eq!(Duration::MILLISECOND, Duration::from_millis(1));`
pub const MICROSECOND: Duration = Duration::from_micros(1)
🔬This is a nightly-only experimental API. (`duration_constants`)

The duration of one microsecond.

Examples
`#![feature(duration_constants)]
use std::time::Duration;

assert_eq!(Duration::MICROSECOND, Duration::from_micros(1));`
pub const NANOSECOND: Duration = Duration::from_nanos(1)
🔬This is a nightly-only experimental API. (`duration_constants`)

The duration of one nanosecond.

Examples
`#![feature(duration_constants)]
use std::time::Duration;

assert_eq!(Duration::NANOSECOND, Duration::from_nanos(1));`
1.53.0 · pub const ZERO: Duration = Duration::from_nanos(0)

A duration of zero time.

Examples
`use std::time::Duration;

let duration = Duration::ZERO;
assert!(duration.is_zero());
assert_eq!(duration.as_nanos(), 0);`
1.53.0 · pub const MAX: Duration = Duration::new(u64::MAX, NANOS_PER_SEC - 1)

The maximum duration.

May vary by platform as necessary. Must be able to contain the difference
between two instances of `Instant` or two instances of `SystemTime`. This
constraint gives it a value of about 584,942,417,355 years in practice, which is
currently used on all platforms.

Examples
`use std::time::Duration;

assert_eq!(Duration::MAX, Duration::new(u64::MAX, 1_000_000_000 - 1));`
const: 1.58.0 · pub const fn new(secs: u64, nanos: u32) -> Duration

Creates a new `Duration` from the specified number of whole seconds and
additional nanoseconds.

If the number of nanoseconds is greater than 1 billion (the number of
nanoseconds in a second), then it will carry over into the seconds provided.

Panics

This constructor will panic if the carry from the nanoseconds overflows the
seconds counter.

Examples
`use std::time::Duration;

let five_seconds = Duration::new(5, 0);`
const: 1.32.0 · pub const fn from_secs(secs: u64) -> Duration

Creates a new `Duration` from the specified number of whole seconds.

Examples
`use std::time::Duration;

let duration = Duration::from_secs(5);

assert_eq!(5, duration.as_secs());
assert_eq!(0, duration.subsec_nanos());`
const: 1.32.0 · pub const fn from_millis(millis: u64) -> Duration

Creates a new `Duration` from the specified number of milliseconds.

Examples
`use std::time::Duration;

let duration = Duration::from_millis(2569);

assert_eq!(2, duration.as_secs());
assert_eq!(569_000_000, duration.subsec_nanos());`
1.27.0 (const: 1.32.0) · pub const fn from_micros(micros: u64) -> Duration

Creates a new `Duration` from the specified number of microseconds.

Examples
`use std::time::Duration;

let duration = Duration::from_micros(1_000_002);

assert_eq!(1, duration.as_secs());
assert_eq!(2000, duration.subsec_nanos());`
1.27.0 (const: 1.32.0) · pub const fn from_nanos(nanos: u64) -> Duration

Creates a new `Duration` from the specified number of nanoseconds.

Examples
`use std::time::Duration;

let duration = Duration::from_nanos(1_000_000_123);

assert_eq!(1, duration.as_secs());
assert_eq!(123, duration.subsec_nanos());`
1.53.0 (const: 1.53.0) · pub const fn is_zero(&self) -> bool

Returns true if this `Duration` spans no time.

Examples
`use std::time::Duration;

assert!(Duration::ZERO.is_zero());
assert!(Duration::new(0, 0).is_zero());
assert!(Duration::from_nanos(0).is_zero());
assert!(Duration::from_secs(0).is_zero());

assert!(!Duration::new(1, 1).is_zero());
assert!(!Duration::from_nanos(1).is_zero());
assert!(!Duration::from_secs(1).is_zero());`
const: 1.32.0 · pub const fn as_secs(&self) -> u64

Returns the number of *whole* seconds contained by this `Duration`.

The returned value does not include the fractional (nanosecond) part of the
duration, which can be obtained using `subsec_nanos`.

Examples
`use std::time::Duration;

let duration = Duration::new(5, 730023852);
assert_eq!(duration.as_secs(), 5);`

To determine the total number of seconds represented by the `Duration` including
the fractional part, use `as_secs_f64` or `as_secs_f32`
1.27.0 (const: 1.32.0) · pub const fn subsec_millis(&self) -> u32

Returns the fractional part of this `Duration`, in whole milliseconds.

This method does **not** return the length of the duration when represented by
milliseconds. The returned number always represents a fractional portion of a
second (i.e., it is less than one thousand).

Examples
`use std::time::Duration;

let duration = Duration::from_millis(5432);
assert_eq!(duration.as_secs(), 5);
assert_eq!(duration.subsec_millis(), 432);`
1.27.0 (const: 1.32.0) · pub const fn subsec_micros(&self) -> u32

Returns the fractional part of this `Duration`, in whole microseconds.

This method does **not** return the length of the duration when represented by
microseconds. The returned number always represents a fractional portion of a
second (i.e., it is less than one million).

Examples
`use std::time::Duration;

let duration = Duration::from_micros(1_234_567);
assert_eq!(duration.as_secs(), 1);
assert_eq!(duration.subsec_micros(), 234_567);`
const: 1.32.0 · pub const fn subsec_nanos(&self) -> u32

Returns the fractional part of this `Duration`, in nanoseconds.

This method does **not** return the length of the duration when represented by
nanoseconds. The returned number always represents a fractional portion of a
second (i.e., it is less than one billion).

Examples
`use std::time::Duration;

let duration = Duration::from_millis(5010);
assert_eq!(duration.as_secs(), 5);
assert_eq!(duration.subsec_nanos(), 10_000_000);`
1.33.0 (const: 1.33.0) · pub const fn as_millis(&self) -> u128

Returns the total number of whole milliseconds contained by this `Duration`.

Examples
`use std::time::Duration;

let duration = Duration::new(5, 730023852);
assert_eq!(duration.as_millis(), 5730);`
1.33.0 (const: 1.33.0) · pub const fn as_micros(&self) -> u128

Returns the total number of whole microseconds contained by this `Duration`.

Examples
`use std::time::Duration;

let duration = Duration::new(5, 730023852);
assert_eq!(duration.as_micros(), 5730023);`
1.33.0 (const: 1.33.0) · pub const fn as_nanos(&self) -> u128

Returns the total number of nanoseconds contained by this `Duration`.

Examples
`use std::time::Duration;

let duration = Duration::new(5, 730023852);
assert_eq!(duration.as_nanos(), 5730023852);`
1.16.0 (const: 1.58.0) · pub const fn checked_add(self, rhs: Duration) -> Option<Duration>

Checked `Duration` addition. Computes `self + other`, returning `None` if
overflow occurred.

Examples

Basic usage:

`use std::time::Duration;

assert_eq!(Duration::new(0, 0).checked_add(Duration::new(0, 1)), Some(Duration::
new(0, 1)));
assert_eq!(Duration::new(1, 0).checked_add(Duration::new(u64::MAX, 0)), None);`
1.53.0 (const: 1.58.0) · pub const fn saturating_add(self, rhs: Duration) -> Duration

Saturating `Duration` addition. Computes `self + other`, returning
`Duration::MAX` if overflow occurred.

Examples
`#![feature(duration_constants)]
use std::time::Duration;

assert_eq!(Duration::new(0, 0).saturating_add(Duration::new(0, 1)), Duration::ne
w(0, 1));
assert_eq!(Duration::new(1, 0).saturating_add(Duration::new(u64::MAX, 0)), Durat
ion::MAX);`
1.16.0 (const: 1.58.0) · pub const fn checked_sub(self, rhs: Duration) -> Option<Duration>

Checked `Duration` subtraction. Computes `self - other`, returning `None` if the
result would be negative or if overflow occurred.

Examples

Basic usage:

`use std::time::Duration;

assert_eq!(Duration::new(0, 1).checked_sub(Duration::new(0, 0)), Some(Duration::
new(0, 1)));
assert_eq!(Duration::new(0, 0).checked_sub(Duration::new(0, 1)), None);`
1.53.0 (const: 1.58.0) · pub const fn saturating_sub(self, rhs: Duration) -> Duration

Saturating `Duration` subtraction. Computes `self - other`, returning
`Duration::ZERO` if the result would be negative or if overflow occurred.

Examples
`use std::time::Duration;

assert_eq!(Duration::new(0, 1).saturating_sub(Duration::new(0, 0)), Duration::ne
w(0, 1));
assert_eq!(Duration::new(0, 0).saturating_sub(Duration::new(0, 1)), Duration::ZE
RO);`
1.16.0 (const: 1.58.0) · pub const fn checked_mul(self, rhs: u32) -> Option<Duration>

Checked `Duration` multiplication. Computes `self * other`, returning `None` if
overflow occurred.

Examples

Basic usage:

`use std::time::Duration;

assert_eq!(Duration::new(0, 500_000_001).checked_mul(2), Some(Duration::new(1, 2
)));
assert_eq!(Duration::new(u64::MAX - 1, 0).checked_mul(2), None);`
1.53.0 (const: 1.58.0) · pub const fn saturating_mul(self, rhs: u32) -> Duration

Saturating `Duration` multiplication. Computes `self * other`, returning
`Duration::MAX` if overflow occurred.

Examples
`#![feature(duration_constants)]
use std::time::Duration;

assert_eq!(Duration::new(0, 500_000_001).saturating_mul(2), Duration::new(1, 2))
;
assert_eq!(Duration::new(u64::MAX - 1, 0).saturating_mul(2), Duration::MAX);`
1.16.0 (const: 1.58.0) · pub const fn checked_div(self, rhs: u32) -> Option<Duration>

Checked `Duration` division. Computes `self / other`, returning `None` if `other
== 0`.

Examples

Basic usage:

`use std::time::Duration;

assert_eq!(Duration::new(2, 0).checked_div(2), Some(Duration::new(1, 0)));
assert_eq!(Duration::new(1, 0).checked_div(2), Some(Duration::new(0, 500_000_000
)));
assert_eq!(Duration::new(2, 0).checked_div(0), None);`
1.38.0 (const: unstable) · pub fn as_secs_f64(&self) -> f64

Returns the number of seconds contained by this `Duration` as `f64`.

The returned value does include the fractional (nanosecond) part of the
duration.

Examples
`use std::time::Duration;

let dur = Duration::new(2, 700_000_000);
assert_eq!(dur.as_secs_f64(), 2.7);`
1.38.0 (const: unstable) · pub fn as_secs_f32(&self) -> f32

Returns the number of seconds contained by this `Duration` as `f32`.

The returned value does include the fractional (nanosecond) part of the
duration.

Examples
`use std::time::Duration;

let dur = Duration::new(2, 700_000_000);
assert_eq!(dur.as_secs_f32(), 2.7);`
1.38.0 (const: unstable) · pub fn from_secs_f64(secs: f64) -> Duration

Creates a new `Duration` from the specified number of seconds represented as
`f64`.

Panics

This constructor will panic if `secs` is negative, overflows `Duration` or not
finite.

Examples
`use std::time::Duration;

let res = Duration::from_secs_f64(0.0);
assert_eq!(res, Duration::new(0, 0));
let res = Duration::from_secs_f64(1e-20);
assert_eq!(res, Duration::new(0, 0));
let res = Duration::from_secs_f64(4.2e-7);
assert_eq!(res, Duration::new(0, 420));
let res = Duration::from_secs_f64(2.7);
assert_eq!(res, Duration::new(2, 700_000_000));
let res = Duration::from_secs_f64(3e10);
assert_eq!(res, Duration::new(30_000_000_000, 0));
// subnormal float
let res = Duration::from_secs_f64(f64::from_bits(1));
assert_eq!(res, Duration::new(0, 0));
// conversion uses rounding
let res = Duration::from_secs_f64(0.999e-9);
assert_eq!(res, Duration::new(0, 1));`
1.38.0 (const: unstable) · pub fn from_secs_f32(secs: f32) -> Duration

Creates a new `Duration` from the specified number of seconds represented as
`f32`.

Panics

This constructor will panic if `secs` is negative, overflows `Duration` or not
finite.

Examples
`use std::time::Duration;

let res = Duration::from_secs_f32(0.0);
assert_eq!(res, Duration::new(0, 0));
let res = Duration::from_secs_f32(1e-20);
assert_eq!(res, Duration::new(0, 0));
let res = Duration::from_secs_f32(4.2e-7);
assert_eq!(res, Duration::new(0, 420));
let res = Duration::from_secs_f32(2.7);
assert_eq!(res, Duration::new(2, 700_000_048));
let res = Duration::from_secs_f32(3e10);
assert_eq!(res, Duration::new(30_000_001_024, 0));
// subnormal float
let res = Duration::from_secs_f32(f32::from_bits(1));
assert_eq!(res, Duration::new(0, 0));
// conversion uses rounding
let res = Duration::from_secs_f32(0.999e-9);
assert_eq!(res, Duration::new(0, 1));`
1.38.0 (const: unstable) · pub fn mul_f64(self, rhs: f64) -> Duration

Multiplies `Duration` by `f64`.

Panics

This method will panic if result is negative, overflows `Duration` or not
finite.

Examples
`use std::time::Duration;

let dur = Duration::new(2, 700_000_000);
assert_eq!(dur.mul_f64(3.14), Duration::new(8, 478_000_000));
assert_eq!(dur.mul_f64(3.14e5), Duration::new(847_800, 0));`
1.38.0 (const: unstable) · pub fn mul_f32(self, rhs: f32) -> Duration

Multiplies `Duration` by `f32`.

Panics

This method will panic if result is negative, overflows `Duration` or not
finite.

Examples
`use std::time::Duration;

let dur = Duration::new(2, 700_000_000);
assert_eq!(dur.mul_f32(3.14), Duration::new(8, 478_000_641));
assert_eq!(dur.mul_f32(3.14e5), Duration::new(847800, 0));`
1.38.0 (const: unstable) · pub fn div_f64(self, rhs: f64) -> Duration

Divide `Duration` by `f64`.

Panics

This method will panic if result is negative, overflows `Duration` or not
finite.

Examples
`use std::time::Duration;

let dur = Duration::new(2, 700_000_000);
assert_eq!(dur.div_f64(3.14), Duration::new(0, 859_872_611));
assert_eq!(dur.div_f64(3.14e5), Duration::new(0, 8_599));`
1.38.0 (const: unstable) · pub fn div_f32(self, rhs: f32) -> Duration

Divide `Duration` by `f32`.

Panics

This method will panic if result is negative, overflows `Duration` or not
finite.

Examples
`use std::time::Duration;

let dur = Duration::new(2, 700_000_000);
// note that due to rounding errors result is slightly
// different from 0.859_872_611
assert_eq!(dur.div_f32(3.14), Duration::new(0, 859_872_580));
assert_eq!(dur.div_f32(3.14e5), Duration::new(0, 8_599));`
 pub fn div_duration_f64(self, rhs: Duration) -> f64
🔬This is a nightly-only experimental API. (`div_duration`)

Divide `Duration` by `Duration` and return `f64`.

Examples
`#![feature(div_duration)]
use std::time::Duration;

let dur1 = Duration::new(2, 700_000_000);
let dur2 = Duration::new(5, 400_000_000);
assert_eq!(dur1.div_duration_f64(dur2), 0.5);`
 pub fn div_duration_f32(self, rhs: Duration) -> f32
🔬This is a nightly-only experimental API. (`div_duration`)

Divide `Duration` by `Duration` and return `f32`.

Examples
`#![feature(div_duration)]
use std::time::Duration;

let dur1 = Duration::new(2, 700_000_000);
let dur2 = Duration::new(5, 400_000_000);
assert_eq!(dur1.div_duration_f32(dur2), 0.5);`

impl Duration
1.66.0 (const: unstable) · pub fn try_from_secs_f32(secs: f32) -> Result<Duration, TryFromFloatSecsError>

The checked version of `from_secs_f32`.

This constructor will return an `Err` if `secs` is negative, overflows
`Duration` or not finite.

Examples
`use std::time::Duration;

let res = Duration::try_from_secs_f32(0.0);
assert_eq!(res, Ok(Duration::new(0, 0)));
let res = Duration::try_from_secs_f32(1e-20);
assert_eq!(res, Ok(Duration::new(0, 0)));
let res = Duration::try_from_secs_f32(4.2e-7);
assert_eq!(res, Ok(Duration::new(0, 420)));
let res = Duration::try_from_secs_f32(2.7);
assert_eq!(res, Ok(Duration::new(2, 700_000_048)));
let res = Duration::try_from_secs_f32(3e10);
assert_eq!(res, Ok(Duration::new(30_000_001_024, 0)));
// subnormal float:
let res = Duration::try_from_secs_f32(f32::from_bits(1));
assert_eq!(res, Ok(Duration::new(0, 0)));

let res = Duration::try_from_secs_f32(-5.0);
assert!(res.is_err());
let res = Duration::try_from_secs_f32(f32::NAN);
assert!(res.is_err());
let res = Duration::try_from_secs_f32(2e19);
assert!(res.is_err());

// the conversion uses rounding with tie resolution to even
let res = Duration::try_from_secs_f32(0.999e-9);
assert_eq!(res, Ok(Duration::new(0, 1)));

// this float represents exactly 976562.5e-9
let val = f32::from_bits(0x3A80_0000);
let res = Duration::try_from_secs_f32(val);
assert_eq!(res, Ok(Duration::new(0, 976_562)));

// this float represents exactly 2929687.5e-9
let val = f32::from_bits(0x3B40_0000);
let res = Duration::try_from_secs_f32(val);
assert_eq!(res, Ok(Duration::new(0, 2_929_688)));

// this float represents exactly 1.000_976_562_5
let val = f32::from_bits(0x3F802000);
let res = Duration::try_from_secs_f32(val);
assert_eq!(res, Ok(Duration::new(1, 976_562)));

// this float represents exactly 1.002_929_687_5
let val = f32::from_bits(0x3F806000);
let res = Duration::try_from_secs_f32(val);
assert_eq!(res, Ok(Duration::new(1, 2_929_688)));`
1.66.0 (const: unstable) · pub fn try_from_secs_f64(secs: f64) -> Result<Duration, TryFromFloatSecsError>

The checked version of `from_secs_f64`.

This constructor will return an `Err` if `secs` is negative, overflows
`Duration` or not finite.

Examples
`use std::time::Duration;

let res = Duration::try_from_secs_f64(0.0);
assert_eq!(res, Ok(Duration::new(0, 0)));
let res = Duration::try_from_secs_f64(1e-20);
assert_eq!(res, Ok(Duration::new(0, 0)));
let res = Duration::try_from_secs_f64(4.2e-7);
assert_eq!(res, Ok(Duration::new(0, 420)));
let res = Duration::try_from_secs_f64(2.7);
assert_eq!(res, Ok(Duration::new(2, 700_000_000)));
let res = Duration::try_from_secs_f64(3e10);
assert_eq!(res, Ok(Duration::new(30_000_000_000, 0)));
// subnormal float
let res = Duration::try_from_secs_f64(f64::from_bits(1));
assert_eq!(res, Ok(Duration::new(0, 0)));

let res = Duration::try_from_secs_f64(-5.0);
assert!(res.is_err());
let res = Duration::try_from_secs_f64(f64::NAN);
assert!(res.is_err());
let res = Duration::try_from_secs_f64(2e19);
assert!(res.is_err());

// the conversion uses rounding with tie resolution to even
let res = Duration::try_from_secs_f64(0.999e-9);
assert_eq!(res, Ok(Duration::new(0, 1)));
let res = Duration::try_from_secs_f64(0.999_999_999_499);
assert_eq!(res, Ok(Duration::new(0, 999_999_999)));
let res = Duration::try_from_secs_f64(0.999_999_999_501);
assert_eq!(res, Ok(Duration::new(1, 0)));
let res = Duration::try_from_secs_f64(42.999_999_999_499);
assert_eq!(res, Ok(Duration::new(42, 999_999_999)));
let res = Duration::try_from_secs_f64(42.999_999_999_501);
assert_eq!(res, Ok(Duration::new(43, 0)));

// this float represents exactly 976562.5e-9
let val = f64::from_bits(0x3F50_0000_0000_0000);
let res = Duration::try_from_secs_f64(val);
assert_eq!(res, Ok(Duration::new(0, 976_562)));

// this float represents exactly 2929687.5e-9
let val = f64::from_bits(0x3F68_0000_0000_0000);
let res = Duration::try_from_secs_f64(val);
assert_eq!(res, Ok(Duration::new(0, 2_929_688)));

// this float represents exactly 1.000_976_562_5
let val = f64::from_bits(0x3FF0_0400_0000_0000);
let res = Duration::try_from_secs_f64(val);
assert_eq!(res, Ok(Duration::new(1, 976_562)));

// this float represents exactly 1.002_929_687_5
let val = f64::from_bits(0x3_FF00_C000_0000_000);
let res = Duration::try_from_secs_f64(val);
assert_eq!(res, Ok(Duration::new(1, 2_929_688)));`
__________
__________

TRAITS:
impl Add<Duration>, impl Add<Duration>, impl AddAssign<Duration>, impl AddAssign<Duration>, impl Clone
impl Debug, impl Default, impl Div<u32>, impl DivAssign<u32>, impl From<Delay>
impl From<TimeSpec>, impl From<TimeSpec>, impl From<TimeSpec>, impl Hash, impl Mul<u32>
impl MulAssign<u32>, impl Ord, impl PartialEq<Duration>, impl PartialOrd<Duration>, impl SampleUni
impl Sub<Duration>, impl Sub<Duration>, impl SubAssign<Duration>, impl SubAssign<Duration>, impl<'a> Sum<&'a Duration>
impl Sum<Duration>, impl Copy, impl Eq, impl StructuralEq, impl StructuralPartialEq
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> CallHasher
impl<T> Downcast<T>, impl<Q, K> Equivalent<K>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> IsDefault, impl<T> Pointable, impl<R, P> ReadPrimitive<R>, impl<Borrowed> SampleBorrow<Borrowed>
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::time::Instant

1.8.0 · 
`pub struct Instant(_);`
A measurement of a monotonically nondecreasing clock. Opaque and useful only
with `Duration`.

Instants are always guaranteed, barring platform bugs, to be no less than any
previously measured instant when created, and are often useful for tasks such as
measuring benchmarks or timing how long an operation takes.

Note, however, that instants are **not** guaranteed to be **steady**. In other
words, each tick of the underlying clock might not be the same length (e.g. some
seconds may be longer than others). An instant may jump forwards or experience
time dilation (slow down or speed up), but it will never go backwards.

Instants are opaque types that can only be compared to one another. There is no
method to get “the number of seconds” from an instant. Instead, it only allows
measuring the duration between two instants (or comparing two instants).

The size of an `Instant` struct may vary depending on the target operating
system.

Example:

`use std::time::{Duration, Instant};
use std::thread::sleep;

fn main() {
   let now = Instant::now();

   // we sleep for 2 seconds
   sleep(Duration::new(2, 0));
   // it prints '2'
   println!("{}", now.elapsed().as_secs());
}`
__________

OS-specific behaviors
An `Instant` is a wrapper around system-specific types and it may behave
differently depending on the underlying operating system. For example, the
following snippet is fine on Linux but panics on macOS:

`use std::time::{Instant, Duration};

let now = Instant::now();
let max_seconds = u64::MAX / 1_000_000_000;
let duration = Duration::new(max_seconds, 0);
println!("{:?}", now + duration);`
__________

Underlying System calls
The following system calls are currently being used by `now()` to find out the
current time:

────────┬──────────────────────────────────────────────────────────────
Platform│System call                                                   
────────┼──────────────────────────────────────────────────────────────
SGX     │`insecure_time` usercall. More information on timekeeping in  
        │SGX                                                           
────────┼──────────────────────────────────────────────────────────────
UNIX    │clock_gettime (Monotonic Clock)                               
────────┼──────────────────────────────────────────────────────────────
Darwin  │mach_absolute_time                                            
────────┼──────────────────────────────────────────────────────────────
VXWorks │clock_gettime (Monotonic Clock)                               
────────┼──────────────────────────────────────────────────────────────
SOLID   │`get_tim`                                                     
────────┼──────────────────────────────────────────────────────────────
WASI    │__wasi_clock_time_get (Monotonic Clock)                       
────────┼──────────────────────────────────────────────────────────────
Windows │QueryPerformanceCounter                                       
────────┴──────────────────────────────────────────────────────────────

**Disclaimer:** These system calls might change over time.

> Note: mathematical operations like `add` may panic if the underlying structure
> cannot represent the new point in time.
### Monotonicity

On all platforms `Instant` will try to use an OS API that guarantees monotonic
behavior if available, which is the case for all tier 1 platforms. In practice
such guarantees are – under rare circumstances – broken by hardware,
virtualization or operating system bugs. To work around these bugs and platforms
not offering monotonic clocks `duration_since`, `elapsed` and `sub` saturate to
zero. In older Rust versions this lead to a panic instead.
`checked_duration_since` can be used to detect and handle situations where
monotonicity is violated, or `Instant`s are subtracted in the wrong order.

This workaround obscures programming errors where earlier and later instants are
accidentally swapped. For this reason future rust versions may reintroduce
panics.
__________
__________

IMPLEMENTATIONS:
impl Instant
pub fn now() -> Instant

Returns an instant corresponding to “now”.

Examples
`use std::time::Instant;

let now = Instant::now();`
pub fn duration_since(&self, earlier: Instant) -> Duration

Returns the amount of time elapsed from another instant to this one, or zero
duration if that instant is later than this one.

Panics

Previous rust versions panicked when `earlier` was later than `self`. Currently
this method saturates. Future versions may reintroduce the panic in some
circumstances. See Monotonicity.

Examples
`use std::time::{Duration, Instant};
use std::thread::sleep;

let now = Instant::now();
sleep(Duration::new(1, 0));
let new_now = Instant::now();
println!("{:?}", new_now.duration_since(now));
println!("{:?}", now.duration_since(new_now)); // 0ns`
1.39.0 · pub fn checked_duration_since(&self, earlier: Instant) -> Option<Duration>

Returns the amount of time elapsed from another instant to this one, or None if
that instant is later than this one.

Due to monotonicity bugs, even under correct logical ordering of the passed
`Instant`s, this method can return `None`.

Examples
`use std::time::{Duration, Instant};
use std::thread::sleep;

let now = Instant::now();
sleep(Duration::new(1, 0));
let new_now = Instant::now();
println!("{:?}", new_now.checked_duration_since(now));
println!("{:?}", now.checked_duration_since(new_now)); // None`
1.39.0 · pub fn saturating_duration_since(&self, earlier: Instant) -> Duration

Returns the amount of time elapsed from another instant to this one, or zero
duration if that instant is later than this one.

Examples
`use std::time::{Duration, Instant};
use std::thread::sleep;

let now = Instant::now();
sleep(Duration::new(1, 0));
let new_now = Instant::now();
println!("{:?}", new_now.saturating_duration_since(now));
println!("{:?}", now.saturating_duration_since(new_now)); // 0ns`
pub fn elapsed(&self) -> Duration

Returns the amount of time elapsed since this instant.

Panics

Previous rust versions panicked when the current time was earlier than self.
Currently this method returns a Duration of zero in that case. Future versions
may reintroduce the panic. See Monotonicity.

Examples
`use std::thread::sleep;
use std::time::{Duration, Instant};

let instant = Instant::now();
let three_secs = Duration::from_secs(3);
sleep(three_secs);
assert!(instant.elapsed() >= three_secs);`
1.34.0 · pub fn checked_add(&self, duration: Duration) -> Option<Instant>

Returns `Some(t)` where `t` is the time `self + duration` if `t` can be
represented as `Instant` (which means it’s inside the bounds of the underlying
data structure), `None` otherwise.
1.34.0 · pub fn checked_sub(&self, duration: Duration) -> Option<Instant>

Returns `Some(t)` where `t` is the time `self - duration` if `t` can be
represented as `Instant` (which means it’s inside the bounds of the underlying
data structure), `None` otherwise.
__________
__________

TRAITS:
impl Add<Duration>, impl AddAssign<Duration>, impl Clone, impl Debug, impl Hash
impl Ord, impl PartialEq<Instant>, impl PartialOrd<Instant>, impl Sub<Duration>, impl Sub<Instant>
impl SubAssign<Duration>, impl Copy, impl Eq, impl StructuralEq, impl StructuralPartialEq
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> CallHasher
impl<T> Downcast<T>, impl<Q, K> Equivalent<K>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>
impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::touch::Event
`pub enum Event {
    FingerPressed {
        id: Finger,
        position: Point,
    },
    FingerMoved {
        id: Finger,
        position: Point,
    },
    FingerLifted {
        id: Finger,
        position: Point,
    },
    FingerLost {
        id: Finger,
        position: Point,
    },
}`
A touch interaction.
__________

Variants


FingerPressed
#### Fields
`id: Finger`
`position: Point`

A touch interaction was started.

FingerMoved
#### Fields
`id: Finger`
`position: Point`

An on-going touch interaction was moved.

FingerLifted
#### Fields
`id: Finger`
`position: Point`

A touch interaction was ended.

FingerLost
#### Fields
`id: Finger`
`position: Point`

A touch interaction was canceled.
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<Event>, impl Copy, impl StructuralPartialEq
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::touch::Finger
`pub struct Finger(pub u64);`
A unique identifier representing a finger on a touch interaction.
__________

Tuple Fields

`0: u64`

__________
__________

TRAITS:
impl Clone, impl Debug, impl Hash, impl PartialEq<Finger>, impl Copy
impl Eq, impl StructuralEq, impl StructuralPartialEq, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> CallHasher, impl<T> Downcast<T>, impl<Q, K> Equivalent<K>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Trait iced::Executor


`pub trait Executor: Sized {
    // Required methods
    fn new() -> Result<Self, Error>
       where Self: Sized;
    fn spawn(&self, future: impl Future<Output = ()> + MaybeSend + 'static);

    // Provided method
    fn enter<R>(&self, f: impl FnOnce() -> R) -> R { ... }
}`


A type that can run futures.


__________

Required Methods



fn new() -> Result<Self, Error> where Self: Sized,

Creates a new `Executor`.


fn spawn(&self, future: impl Future<Output = ()> + MaybeSend + 'static)

Spawns a future in the `Executor`.


__________

Provided Methods



fn enter<R>(&self, f: impl FnOnce() -> R) -> R

Runs the given closure inside the `Executor`.

Some executors, like `tokio`, require some global state to be in place before
creating futures. This method can be leveraged to set up this global state, call
a function, restore the state, and obtain the result of the call.


__________

Implementations on Foreign Types




impl Executor for ThreadPool

fn new() -> Result<ThreadPool, Error>

fn spawn(&self, future: impl Future<Output = ()> + Send + 'static)


__________

Implementors




impl Executor for Executor




==============
Trait iced::Sandbox


`pub trait Sandbox {
    type Message: Debug + Send;

    // Required methods
    fn new() -> Self;
    fn title(&self) -> String;
    fn update(&mut self, message: Self::Message);
    fn view(&self) -> Element<'_, Self::Message>;

    // Provided methods
    fn theme(&self) -> Theme { ... }
    fn style(&self) -> Application { ... }
    fn scale_factor(&self) -> f64 { ... }
    fn run(settings: Settings<()>) -> Result<(), Error>
       where Self: 'static + Sized { ... }
}`


A sandboxed `Application`.

If you are a just getting started with the library, this trait offers a simpler
interface than `Application`.

Unlike an `Application`, a `Sandbox` cannot run any asynchronous actions or be
initialized with some external flags. However, both traits are very similar and
upgrading from a `Sandbox` is very straightforward.

Therefore, it is recommended to always start by implementing this trait and
upgrade only once necessary.

__________

Examples


The repository has a bunch of examples that use the `Sandbox` trait:

* `bezier_tool`, a Paint-like tool for drawing Bézier curves using the `Canvas
  widget`.
* `counter`, the classic counter example explained in the overview.
* `custom_widget`, a demonstration of how to build a custom widget that draws a
  circle.
* `geometry`, a custom widget showcasing how to draw geometry with the `Mesh2D`
  primitive in `iced_wgpu`.
* `pane_grid`, a grid of panes that can be split, resized, and reorganized.
* `progress_bar`, a simple progress bar that can be filled by using a slider.
* `styling`, an example showcasing custom styling with a light and dark theme.
* `svg`, an application that renders the Ghostscript Tiger by leveraging the
  `Svg` widget.
* `tour`, a simple UI tour that can run both on native platforms and the web!


### A simple “Hello, world!”

If you just want to get started, here is a simple `Sandbox` that says “Hello,
world!”:

`use iced::{Element, Sandbox, Settings};

pub fn main() -> iced::Result {
    Hello::run(Settings::default())
}

struct Hello;

impl Sandbox for Hello {
    type Message = ();

    fn new() -> Hello {
        Hello
    }

    fn title(&self) -> String {
        String::from("A cool application")
    }

    fn update(&mut self, _message: Self::Message) {
        // This application has no interactions
    }

    fn view(&self) -> Element<Self::Message> {
        "Hello, world!".into()
    }
}`


__________

Required Associated Types



type Message: Debug + Send

The type of **messages** your `Sandbox` will produce.


__________

Required Methods



fn new() -> Self

Initializes the `Sandbox`.

Here is where you should return the initial state of your app.


fn title(&self) -> String

Returns the current title of the `Sandbox`.

This title can be dynamic! The runtime will automatically update the title of
your application when necessary.


fn update(&mut self, message: Self::Message)

Handles a **message** and updates the state of the `Sandbox`.

This is where you define your **update logic**. All the **messages**, produced
by user interactions, will be handled by this method.


fn view(&self) -> Element<'_, Self::Message>

Returns the widgets to display in the `Sandbox`.

These widgets can produce **messages** based on user interaction.


__________

Provided Methods



fn theme(&self) -> Theme

Returns the current `Theme` of the `Sandbox`.

If you want to use your own custom theme type, you will have to use an
`Application`.

By default, it returns `Theme::default`.


fn style(&self) -> Application

Returns the current style variant of `theme::Application`.

By default, it returns `theme::Application::default`.


fn scale_factor(&self) -> f64

Returns the scale factor of the `Sandbox`.

It can be used to dynamically control the size of the UI at runtime (i.e.
zooming).

For instance, a scale factor of `2.0` will make widgets twice as big, while a
scale factor of `0.5` will shrink them to half their size.

By default, it returns `1.0`.


fn run(settings: Settings<()>) -> Result<(), Error> where Self: 'static + Sized,

Runs the `Sandbox`.

On native platforms, this method will take control of the current thread and
**will NOT return**.

It should probably be that last thing you call in your `main` function.


__________

Implementors




==============
Type Definition iced::Element


`pub type Element<'a, Message, Renderer = Renderer> = Element<'a, Message, Rende
rer>;`


A generic widget.

This is an alias of an `iced_native` element with a default `Renderer`.




==============
Type Definition iced::Renderer


`pub type Renderer<Theme = Theme> = Renderer<Backend, Theme>;`


A `wgpu` graphics renderer for `iced`.




==============
Type Definition iced::Result


`pub type Result = Result<(), Error>;`


The result of running an `Application`.




==============
Type Definition iced::Subscription


`pub type Subscription<T> = Subscription<Hasher, (Event, Status), T>;`


A request to listen to external events.

Besides performing async actions on demand with `Command`, most applications
also need to listen to external events passively.

A `Subscription` is normally provided to some runtime, like a `Command`, and it
will generate events as long as the user keeps requesting it.

For instance, you can use a `Subscription` to listen to a WebSocket connection,
keyboard presses, mouse events, time ticks, etc.




==============
Struct iced::widget::button::Appearance
[−]
`pub struct Appearance {
    pub shadow_offset: Vector<f32>,
    pub background: Option<Background>,
    pub border_radius: f32,
    pub border_width: f32,
    pub border_color: Color,
    pub text_color: Color,
}`
The appearance of a button.
__________

Fields

`shadow_offset: Vector<f32>`

The amount of offset to apply to the shadow of the button.
`background: Option<Background>`

The `Background` of the button.
`border_radius: f32`

The border radius of the button.
`border_width: f32`

The border width of the button.
`border_color: Color`

The border `Color` of the button.
`text_color: Color`

The text `Color` of the button.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Default, impl Copy, impl RefUnwindSafe
impl Send, impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<R, P> ReadPrimitive<R>
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Trait iced::widget::button::StyleSheet


[−]
`pub trait StyleSheet {
    type Style: Default;

    // Required method
    fn active(&self, style: &Self::Style) -> Appearance;

    // Provided methods
    fn hovered(&self, style: &Self::Style) -> Appearance { ... }
    fn pressed(&self, style: &Self::Style) -> Appearance { ... }
    fn disabled(&self, style: &Self::Style) -> Appearance { ... }
}`


A set of rules that dictate the style of a button.


__________

Required Associated Types



type Style: Default

The supported style of the `StyleSheet`.


__________

Required Methods



fn active(&self, style: &Self::Style) -> Appearance

Produces the active `Appearance` of a button.


__________

Provided Methods



fn hovered(&self, style: &Self::Style) -> Appearance

Produces the hovered `Appearance` of a button.


fn pressed(&self, style: &Self::Style) -> Appearance

Produces the pressed `Appearance` of a button.


fn disabled(&self, style: &Self::Style) -> Appearance

Produces the disabled `Appearance` of a button.


__________

Implementors




impl StyleSheet for Theme

type Style = Button




==============
Type Definition iced::widget::button::Button


`pub type Button<'a, Message, Renderer = Renderer> = Button<'a, Message, Rendere
r>;`


A widget that produces a message when clicked.




==============
Enum iced::widget::canvas::Cursor
`pub enum Cursor {
    Available(Point),
    Unavailable,
}`
Available on **crate feature `canvas`** only.
The mouse cursor state.
__________

Variants


Available(Point)

The cursor has a defined position.

Unavailable

The cursor is currently unavailable (i.e. out of bounds or busy).
__________
__________

IMPLEMENTATIONS:
impl Cursor
pub fn position(&self) -> Option<Point>

Returns the absolute position of the `Cursor`, if available.
pub fn position_in(&self, bounds: &Rectangle<f32>) -> Option<Point>

Returns the relative position of the `Cursor` inside the given bounds, if
available.

If the `Cursor` is not over the provided bounds, this method will return `None`.
pub fn position_from(&self, origin: Point) -> Option<Point>

Returns the relative position of the `Cursor` from the given origin, if
available.
pub fn is_over(&self, bounds: &Rectangle<f32>) -> bool

Returns whether the `Cursor` is currently over the provided bounds or not.
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<Cursor>, impl Copy, impl StructuralPartialEq
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::widget::canvas::Event
`pub enum Event {
    Mouse(Event),
    Touch(Event),
    Keyboard(Event),
}`
Available on **crate feature `canvas`** only.
A `Canvas` event.
__________

Variants


Mouse(Event)

A mouse event.

Touch(Event)

A touch event.

Keyboard(Event)

A keyboard event.
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<Event>, impl Copy, impl StructuralPartialEq
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::widget::canvas::FillRule
`pub enum FillRule {
    NonZero,
    EvenOdd,
}`
Available on **crate feature `canvas`** only.
The fill rule defines how to determine what is inside and what is outside of a
shape.

See the SVG specification.
__________

Variants


NonZero

EvenOdd
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<FillRule>, impl Copy, impl Eq
impl StructuralEq, impl StructuralPartialEq, impl RefUnwindSafe, impl Send, impl Sync
impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<Q, K> Equivalent<K>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::widget::canvas::Gradient
`pub enum Gradient {
    Linear(Linear),
}`
Available on **crate feature `canvas`** only.
A fill which transitions colors progressively along a direction, either
linearly, radially (TBD), or conically (TBD).
__________

Variants


Linear(Linear)

A linear gradient interpolates colors along a direction from its `start` to its
`end` point.
__________
__________

IMPLEMENTATIONS:
impl Gradient
pub fn linear(position: impl Into<Position>) -> Builder

Creates a new linear `linear::Builder`.
__________
__________

TRAITS:
impl Clone, impl Debug, impl From<Gradient>, impl From<Gradient>, impl PartialEq<Gradient>
impl StructuralPartialEq, impl RefUnwindSafe, impl Send, impl Sync, impl Unpin
impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::widget::canvas::LineCap
`pub enum LineCap {
    Butt,
    Square,
    Round,
}`
Available on **crate feature `canvas`** only.
The shape used at the end of open subpaths when they are stroked.
__________

Variants


Butt

The stroke for each sub-path does not extend beyond its two endpoints.

Square

At the end of each sub-path, the shape representing the stroke will be extended
by a square.

Round

At the end of each sub-path, the shape representing the stroke will be extended
by a semicircle.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Default, impl Copy, impl RefUnwindSafe
impl Send, impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<R, P> ReadPrimitive<R>
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::widget::canvas::LineJoin
`pub enum LineJoin {
    Miter,
    Round,
    Bevel,
}`
Available on **crate feature `canvas`** only.
The shape used at the corners of paths or basic shapes when they are stroked.
__________

Variants


Miter

A sharp corner.

Round

A round corner.

Bevel

A bevelled corner.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Default, impl Copy, impl RefUnwindSafe
impl Send, impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<R, P> ReadPrimitive<R>
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::widget::canvas::Style
`pub enum Style {
    Solid(Color),
    Gradient(Gradient),
}`
Available on **crate feature `canvas`** only.
The coloring style of some drawing.
__________

Variants


Solid(Color)

A solid `Color`.

Gradient(Gradient)

A `Gradient` color.
__________
__________

TRAITS:
impl Clone, impl Debug, impl From<Color>, impl From<Gradient>, impl PartialEq<Style>
impl StructuralPartialEq, impl RefUnwindSafe, impl Send, impl Sync, impl Unpin
impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::widget::canvas::event::Event
`pub enum Event {
    Mouse(Event),
    Touch(Event),
    Keyboard(Event),
}`
Available on **crate feature `canvas`** only.
A `Canvas` event.
__________

Variants


Mouse(Event)

A mouse event.

Touch(Event)

A touch event.

Keyboard(Event)

A keyboard event.
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<Event>, impl Copy, impl StructuralPartialEq
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::widget::canvas::event::Status
`pub enum Status {
    Ignored,
    Captured,
}`
Available on **crate feature `canvas`** only.
The status of an `Event` after being processed.
__________

Variants


Ignored

The `Event` was **NOT** handled by any widget.

Captured

The `Event` was handled and processed by a widget.
__________
__________

IMPLEMENTATIONS:
impl Status
pub fn merge(self, b: Status) -> Status

Merges two `Status` into one.

`Captured` takes precedence over `Ignored`:

`use iced_native::event::Status;

assert_eq!(Status::Ignored.merge(Status::Ignored), Status::Ignored);
assert_eq!(Status::Ignored.merge(Status::Captured), Status::Captured);
assert_eq!(Status::Captured.merge(Status::Ignored), Status::Captured);
assert_eq!(Status::Captured.merge(Status::Captured), Status::Captured);`
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<Status>, impl Copy, impl Eq
impl StructuralEq, impl StructuralPartialEq, impl RefUnwindSafe, impl Send, impl Sync
impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<Q, K> Equivalent<K>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::widget::canvas::fill::FillRule
`pub enum FillRule {
    NonZero,
    EvenOdd,
}`
Available on **crate feature `canvas`** only.
The fill rule defines how to determine what is inside and what is outside of a
shape.

See the SVG specification.
__________

Variants


NonZero

EvenOdd
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<FillRule>, impl Copy, impl Eq
impl StructuralEq, impl StructuralPartialEq, impl RefUnwindSafe, impl Send, impl Sync
impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<Q, K> Equivalent<K>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::widget::canvas::fill::Style
`pub enum Style {
    Solid(Color),
    Gradient(Gradient),
}`
Available on **crate feature `canvas`** only.
The coloring style of some drawing.
__________

Variants


Solid(Color)

A solid `Color`.

Gradient(Gradient)

A `Gradient` color.
__________
__________

TRAITS:
impl Clone, impl Debug, impl From<Color>, impl From<Gradient>, impl PartialEq<Style>
impl StructuralPartialEq, impl RefUnwindSafe, impl Send, impl Sync, impl Unpin
impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::canvas::fill::Fill
`pub struct Fill {
    pub style: Style,
    pub rule: FillRule,
}`
Available on **crate feature `canvas`** only.
The style used to fill geometry.
__________

Fields

`style: Style`

The color or gradient of the fill.

By default, it is set to `Style::Solid` with `Color::BLACK`.
`rule: FillRule`

The fill rule defines how to determine what is inside and what is outside of a
shape.

See the SVG specification for more details.

By default, it is set to `NonZero`.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Default, impl From<Color>, impl From<Gradient>
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable
impl<R, P> ReadPrimitive<R>, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::widget::canvas::gradient::Gradient
`pub enum Gradient {
    Linear(Linear),
}`
Available on **crate feature `canvas`** only.
A fill which transitions colors progressively along a direction, either
linearly, radially (TBD), or conically (TBD).
__________

Variants


Linear(Linear)

A linear gradient interpolates colors along a direction from its `start` to its
`end` point.
__________
__________

IMPLEMENTATIONS:
impl Gradient
pub fn linear(position: impl Into<Position>) -> Builder

Creates a new linear `linear::Builder`.
__________
__________

TRAITS:
impl Clone, impl Debug, impl From<Gradient>, impl From<Gradient>, impl PartialEq<Gradient>
impl StructuralPartialEq, impl RefUnwindSafe, impl Send, impl Sync, impl Unpin
impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::widget::canvas::gradient::Location
`pub enum Location {
    TopLeft,
    Top,
    TopRight,
    Right,
    BottomRight,
    Bottom,
    BottomLeft,
    Left,
}`
Available on **crate feature `canvas`** only.
The location of a relatively-positioned gradient.
__________

Variants


TopLeft

Top left.

Top

Top.

TopRight

Top right.

Right

Right.

BottomRight

Bottom right.

Bottom

Bottom.

BottomLeft

Bottom left.

Left

Left.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Copy, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::widget::canvas::gradient::Position
`pub enum Position {
    Absolute {
        start: Point,
        end: Point,
    },
    Relative {
        top_left: Point,
        size: Size<f32>,
        start: Location,
        end: Location,
    },
}`
Available on **crate feature `canvas`** only.
The position of the gradient within its bounds.
__________

Variants


Absolute
#### Fields
`start: Point`

The starting point of the gradient.
`end: Point`

The ending point of the gradient.

The gradient will be positioned with respect to two points.

Relative
#### Fields
`top_left: Point`

The top left position of the bounds.
`size: Size<f32>`

The width & height of the bounds.
`start: Location`

The start Location of the gradient.
`end: Location`

The end Location of the gradient.

The gradient will be positioned relative to the provided bounds.
__________
__________

TRAITS:
impl Debug, impl From<(Point, Point)>, impl RefUnwindSafe, impl Send, impl Sync
impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::widget::canvas::gradient::linear::BuilderError
`pub enum BuilderError {
    MissingColorStop,
    DuplicateOffset(f32),
    InvalidOffset(f32),
}`
Available on **crate feature `canvas`** only.
An error that happened when building a `Linear` gradient.
__________

Variants


MissingColorStop

Gradients must contain at least one color stop.

DuplicateOffset(f32)

Offsets in a gradient must all be unique & finite.

InvalidOffset(f32)

Offsets in a gradient must be between 0.0..=1.0.
__________
__________

TRAITS:
impl Debug, impl Display, impl Error, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<E> Provider, impl<T> ToString
impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>
impl<T> MaybeSend




==============
Struct iced::widget::canvas::gradient::linear::Builder
`pub struct Builder { /* private fields */ }`
Available on **crate feature `canvas`** only.
A `Linear` builder.
__________
__________

IMPLEMENTATIONS:
impl Builder
pub fn new(position: Position) -> Builder

Creates a new `Builder`.
pub fn add_stop(self, offset: f32, color: Color) -> Builder

Adds a new stop, defined by an offset and a color, to the gradient.

`offset` must be between `0.0` and `1.0` or the gradient cannot be built.

Note: when using the `glow` backend, any color stop added after the 16th will
not be displayed.

On the `wgpu` backend this limitation does not exist (technical limit is 524,288
stops).
pub fn build(self) -> Result<Gradient, BuilderError>

Builds the linear `Gradient` of this `Builder`.

Returns `BuilderError` if gradient in invalid.
__________
__________

TRAITS:
impl Debug, impl RefUnwindSafe, impl Send, impl Sync, impl Unpin
impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::canvas::gradient::linear::Linear
`pub struct Linear {
    pub start: Point,
    pub end: Point,
    pub color_stops: Vec<ColorStop, Global>,
}`
Available on **crate feature `canvas`** only.
A linear gradient that can be used in the style of `Fill` or `Stroke`.
__________

Fields

`start: Point`

The point where the linear gradient begins.
`end: Point`

The point where the linear gradient ends.
`color_stops: Vec<ColorStop, Global>`

`ColorStop`s along the linear gradient path.
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<Linear>, impl StructuralPartialEq, impl RefUnwindSafe
impl Send, impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned
impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>
impl<T> MaybeSend




==============
Struct iced::widget::canvas::gradient::ColorStop
`pub struct ColorStop {
    pub offset: f32,
    pub color: Color,
}`
Available on **crate feature `canvas`** only.
A point along the gradient vector where the specified `color` is unmixed.
__________

Fields

`offset: f32`

Offset along the gradient vector.
`color: Color`

The color of the gradient at the specified `offset`.
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<ColorStop>, impl Copy, impl StructuralPartialEq
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::canvas::gradient::Linear
`pub struct Linear {
    pub start: Point,
    pub end: Point,
    pub color_stops: Vec<ColorStop, Global>,
}`
Available on **crate feature `canvas`** only.
A linear gradient that can be used in the style of `Fill` or `Stroke`.
__________

Fields

`start: Point`

The point where the linear gradient begins.
`end: Point`

The point where the linear gradient ends.
`color_stops: Vec<ColorStop, Global>`

`ColorStop`s along the linear gradient path.
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<Linear>, impl StructuralPartialEq, impl RefUnwindSafe
impl Send, impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned
impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>
impl<T> MaybeSend




==============
Struct iced::widget::canvas::path::arc::Arc
`pub struct Arc {
    pub center: Point,
    pub radius: f32,
    pub start_angle: f32,
    pub end_angle: f32,
}`
Available on **crate feature `canvas`** only.
A segment of a differentiable curve.
__________

Fields

`center: Point`

The center of the arc.
`radius: f32`

The radius of the arc.
`start_angle: f32`

The start of the segment’s angle, clockwise rotation.
`end_angle: f32`

The end of the segment’s angle, clockwise rotation.
__________
__________

TRAITS:
impl Clone, impl Debug, impl From<Arc>, impl Copy, impl RefUnwindSafe
impl Send, impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned
impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>
impl<T> MaybeSend




==============
Struct iced::widget::canvas::path::arc::Elliptical
`pub struct Elliptical {
    pub center: Point,
    pub radii: Vector<f32>,
    pub rotation: f32,
    pub start_angle: f32,
    pub end_angle: f32,
}`
Available on **crate feature `canvas`** only.
An elliptical `Arc`.
__________

Fields

`center: Point`

The center of the arc.
`radii: Vector<f32>`

The radii of the arc’s ellipse, defining its axes.
`rotation: f32`

The rotation of the arc’s ellipse.
`start_angle: f32`

The start of the segment’s angle, clockwise rotation.
`end_angle: f32`

The end of the segment’s angle, clockwise rotation.
__________
__________

TRAITS:
impl Clone, impl Debug, impl From<Arc>, impl Copy, impl RefUnwindSafe
impl Send, impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned
impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>
impl<T> MaybeSend




==============
Struct iced::widget::canvas::path::Arc
`pub struct Arc {
    pub center: Point,
    pub radius: f32,
    pub start_angle: f32,
    pub end_angle: f32,
}`
Available on **crate feature `canvas`** only.
A segment of a differentiable curve.
__________

Fields

`center: Point`

The center of the arc.
`radius: f32`

The radius of the arc.
`start_angle: f32`

The start of the segment’s angle, clockwise rotation.
`end_angle: f32`

The end of the segment’s angle, clockwise rotation.
__________
__________

TRAITS:
impl Clone, impl Debug, impl From<Arc>, impl Copy, impl RefUnwindSafe
impl Send, impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned
impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>
impl<T> MaybeSend




==============
Struct iced::widget::canvas::path::Builder
`pub struct Builder { /* private fields */ }`
Available on **crate feature `canvas`** only.
A `Path` builder.

Once a `Path` is built, it can no longer be mutated.
__________
__________

IMPLEMENTATIONS:
impl Builder
pub fn new() -> Builder

Creates a new `Builder`.
pub fn move_to(&mut self, point: Point)

Moves the starting point of a new sub-path to the given `Point`.
pub fn line_to(&mut self, point: Point)

Connects the last point in the `Path` to the given `Point` with a straight line.
pub fn arc(&mut self, arc: Arc)

Adds an `Arc` to the `Path` from `start_angle` to `end_angle` in a clockwise
direction.
pub fn arc_to(&mut self, a: Point, b: Point, radius: f32)

Adds a circular arc to the `Path` with the given control points and radius.

This essentially draws a straight line segment from the current position to `a`,
but fits a circular arc of `radius` tangent to that segment and tangent to the
line between `a` and `b`.

With another `.line_to(b)`, the result will be a path connecting the starting
point and `b` with straight line segments towards `a` and a circular arc
smoothing out the corner at `a`.

See the HTML5 specification of `arcTo` for more details and examples.
pub fn ellipse(&mut self, arc: Elliptical)

Adds an ellipse to the `Path` using a clockwise direction.
pub fn bezier_curve_to(&mut self, control_a: Point, control_b: Point, to: Point)

Adds a cubic Bézier curve to the `Path` given its two control points and its end
point.
pub fn quadratic_curve_to(&mut self, control: Point, to: Point)

Adds a quadratic Bézier curve to the `Path` given its control point and its end
point.
pub fn rectangle(&mut self, top_left: Point, size: Size<f32>)

Adds a rectangle to the `Path` given its top-left corner coordinate and its
`Size`.
pub fn circle(&mut self, center: Point, radius: f32)

Adds a circle to the `Path` given its center coordinate and its radius.
pub fn close(&mut self)

Closes the current sub-path in the `Path` with a straight line to the starting
point.
pub fn build(self) -> Path

Builds the `Path` of this `Builder`.
__________
__________

TRAITS:
impl Default, impl RefUnwindSafe, impl Send, impl Sync, impl Unpin
impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<R, P> ReadPrimitive<R>, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::canvas::path::Path
`pub struct Path { /* private fields */ }`
Available on **crate feature `canvas`** only.
An immutable set of points that may or may not be connected.

A single `Path` can represent different kinds of 2D shapes!
__________
__________

IMPLEMENTATIONS:
impl Path
pub fn new(f: impl FnOnce(&mut Builder)) -> Path

Creates a new `Path` with the provided closure.

Use the `Builder` to configure your `Path`.
pub fn line(from: Point, to: Point) -> Path

Creates a new `Path` representing a line segment given its starting and end
points.
pub fn rectangle(top_left: Point, size: Size<f32>) -> Path

Creates a new `Path` representing a rectangle given its top-left corner
coordinate and its `Size`.
pub fn circle(center: Point, radius: f32) -> Path

Creates a new `Path` representing a circle given its center coordinate and its
radius.
__________
__________

TRAITS:
impl Clone, impl Debug, impl RefUnwindSafe, impl Send, impl Sync
impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>
impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::widget::canvas::stroke::LineCap
`pub enum LineCap {
    Butt,
    Square,
    Round,
}`
Available on **crate feature `canvas`** only.
The shape used at the end of open subpaths when they are stroked.
__________

Variants


Butt

The stroke for each sub-path does not extend beyond its two endpoints.

Square

At the end of each sub-path, the shape representing the stroke will be extended
by a square.

Round

At the end of each sub-path, the shape representing the stroke will be extended
by a semicircle.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Default, impl Copy, impl RefUnwindSafe
impl Send, impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<R, P> ReadPrimitive<R>
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::widget::canvas::stroke::LineJoin
`pub enum LineJoin {
    Miter,
    Round,
    Bevel,
}`
Available on **crate feature `canvas`** only.
The shape used at the corners of paths or basic shapes when they are stroked.
__________

Variants


Miter

A sharp corner.

Round

A round corner.

Bevel

A bevelled corner.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Default, impl Copy, impl RefUnwindSafe
impl Send, impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<R, P> ReadPrimitive<R>
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::widget::canvas::stroke::Style
`pub enum Style {
    Solid(Color),
    Gradient(Gradient),
}`
Available on **crate feature `canvas`** only.
The coloring style of some drawing.
__________

Variants


Solid(Color)

A solid `Color`.

Gradient(Gradient)

A `Gradient` color.
__________
__________

TRAITS:
impl Clone, impl Debug, impl From<Color>, impl From<Gradient>, impl PartialEq<Style>
impl StructuralPartialEq, impl RefUnwindSafe, impl Send, impl Sync, impl Unpin
impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::canvas::stroke::LineDash
`pub struct LineDash<'a> {
    pub segments: &'a [f32],
    pub offset: usize,
}`
Available on **crate feature `canvas`** only.
The dash pattern used when stroking the line.
__________

Fields

`segments: &'a [f32]`

The alternating lengths of lines and gaps which describe the pattern.
`offset: usize`

The offset of `LineDash::segments` to start the pattern.
__________
__________

TRAITS:
impl<'a> Clone, impl<'a> Debug, impl<'a> Default, impl<'a> Copy, impl<'a> RefUnwindSafe
impl<'a> Send, impl<'a> Sync, impl<'a> Unpin, impl<'a> UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<R, P> ReadPrimitive<R>
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::canvas::stroke::Stroke
`pub struct Stroke<'a> {
    pub style: Style,
    pub width: f32,
    pub line_cap: LineCap,
    pub line_join: LineJoin,
    pub line_dash: LineDash<'a>,
}`
Available on **crate feature `canvas`** only.
The style of a stroke.
__________

Fields

`style: Style`

The color or gradient of the stroke.

By default, it is set to a `Style::Solid` with `Color::BLACK`.
`width: f32`

The distance between the two edges of the stroke.
`line_cap: LineCap`

The shape to be used at the end of open subpaths when they are stroked.
`line_join: LineJoin`

The shape to be used at the corners of paths or basic shapes when they are
stroked.
`line_dash: LineDash<'a>`

The dash pattern used when stroking the line.
__________
__________

IMPLEMENTATIONS:
impl<'a> Stroke<'a>
pub fn with_color(self, color: Color) -> Stroke<'a>

Sets the color of the `Stroke`.
pub fn with_width(self, width: f32) -> Stroke<'a>

Sets the width of the `Stroke`.
pub fn with_line_cap(self, line_cap: LineCap) -> Stroke<'a>

Sets the `LineCap` of the `Stroke`.
pub fn with_line_join(self, line_join: LineJoin) -> Stroke<'a>

Sets the `LineJoin` of the `Stroke`.
__________
__________

TRAITS:
impl<'a> Clone, impl<'a> Debug, impl<'a> Default, impl<'a> RefUnwindSafe, impl<'a> Send
impl<'a> Sync, impl<'a> Unpin, impl<'a> UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<R, P> ReadPrimitive<R>, impl<T> ToOwned
impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>
impl<T> MaybeSend




==============
Struct iced::widget::canvas::Cache
`pub struct Cache { /* private fields */ }`
Available on **crate feature `canvas`** only.
A simple cache that stores generated `Geometry` to avoid recomputation.

A `Cache` will not redraw its geometry unless the dimensions of its layer change
or it is explicitly cleared.
__________
__________

IMPLEMENTATIONS:
impl Cache
pub fn new() -> Cache

Creates a new empty `Cache`.
pub fn clear(&self)

Clears the `Cache`, forcing a redraw the next time it is used.
pub fn draw( &self, bounds: Size<f32>, draw_fn: impl FnOnce(&mut Frame) ) ->
Geometry

Draws `Geometry` using the provided closure and stores it in the `Cache`.

The closure will only be called when

* the bounds have changed since the previous draw call.
* the `Cache` is empty or has been explicitly cleared.

Otherwise, the previously stored `Geometry` will be returned. The `Cache` is not
cleared in this case. In other words, it will keep returning the stored
`Geometry` if needed.
__________
__________

TRAITS:
impl Debug, impl Default, impl !RefUnwindSafe, impl Send, impl !Sync
impl Unpin, impl !UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<R, P> ReadPrimitive<R>, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>
impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::canvas::Canvas
`pub struct Canvas<Message, Theme, P>  where
    P: Program<Message, Theme>,{ /* private fields */ }`
Available on **crate feature `canvas`** only.
A widget capable of drawing 2D graphics.

### Drawing a simple circle

If you want to get a quick overview, here’s how we can draw a simple circle:

`use iced::widget::canvas::{self, Canvas, Cursor, Fill, Frame, Geometry, Path, P
rogram};
use iced::{Color, Rectangle, Theme};

// First, we define the data we need for drawing
#[derive(Debug)]
struct Circle {
    radius: f32,
}

// Then, we implement the `Program` trait
impl Program<()> for Circle {
    type State = ();

    fn draw(&self, _state: &(), _theme: &Theme, bounds: Rectangle, _cursor: Curs
or) -> Vec<Geometry>{
        // We prepare a new `Frame`
        let mut frame = Frame::new(bounds.size());

        // We create a `Path` representing a simple circle
        let circle = Path::circle(frame.center(), self.radius);

        // And fill it with some color
        frame.fill(&circle, Color::BLACK);

        // Finally, we produce the geometry
        vec![frame.into_geometry()]
    }
}

// Finally, we simply use our `Circle` to create the `Canvas`!
let canvas = Canvas::new(Circle { radius: 50.0 });`
__________
__________

IMPLEMENTATIONS:
impl<Message, Theme, P> Canvas<Message, Theme, P> where P: Program<Message,
Theme>,
pub fn new(program: P) -> Canvas<Message, Theme, P>

Creates a new `Canvas`.
pub fn width(self, width: impl Into<Length>) -> Canvas<Message, Theme, P>

Sets the width of the `Canvas`.
pub fn height(self, height: impl Into<Length>) -> Canvas<Message, Theme, P>

Sets the height of the `Canvas`.
__________
__________

TRAITS:
impl<Message, Theme, P> Debug, impl<Message, P, B, T> Widget<Message, Renderer<B, T>>, impl<Message, Theme, P> RefUnwindSafe, impl<Message, Theme, P> Send, impl<Message, Theme, P> Sync
impl<Message, Theme, P> Unpin, impl<Message, Theme, P> UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::canvas::Fill
`pub struct Fill {
    pub style: Style,
    pub rule: FillRule,
}`
Available on **crate feature `canvas`** only.
The style used to fill geometry.
__________

Fields

`style: Style`

The color or gradient of the fill.

By default, it is set to `Style::Solid` with `Color::BLACK`.
`rule: FillRule`

The fill rule defines how to determine what is inside and what is outside of a
shape.

See the SVG specification for more details.

By default, it is set to `NonZero`.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Default, impl From<Color>, impl From<Gradient>
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable
impl<R, P> ReadPrimitive<R>, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::canvas::Frame
`pub struct Frame { /* private fields */ }`
Available on **crate feature `canvas`** only.
The frame of a `Canvas`.
__________
__________

IMPLEMENTATIONS:
impl Frame
pub fn new(size: Size<f32>) -> Frame

Creates a new empty `Frame` with the given dimensions.

The default coordinate system of a `Frame` has its origin at the top-left corner
of its bounds.
pub fn width(&self) -> f32

Returns the width of the `Frame`.
pub fn height(&self) -> f32

Returns the height of the `Frame`.
pub fn size(&self) -> Size<f32>

Returns the dimensions of the `Frame`.
pub fn center(&self) -> Point

Returns the coordinate of the center of the `Frame`.
pub fn fill(&mut self, path: &Path, fill: impl Into<Fill>)

Draws the given `Path` on the `Frame` by filling it with the provided style.
pub fn fill_rectangle( &mut self, top_left: Point, size: Size<f32>, fill: impl
Into<Fill> )

Draws an axis-aligned rectangle given its top-left corner coordinate and its
`Size` on the `Frame` by filling it with the provided style.
pub fn stroke<'a>(&mut self, path: &Path, stroke: impl Into<Stroke<'a>>)

Draws the stroke of the given `Path` on the `Frame` with the provided style.
pub fn fill_text(&mut self, text: impl Into<Text>)

Draws the characters of the given `Text` on the `Frame`, filling them with the
given color.

**Warning:** Text currently does not work well with rotations and scale
transforms! The position will be correctly transformed, but the resulting glyphs
will not be rotated or scaled properly.

Additionally, all text will be rendered on top of all the layers of a `Canvas`.
Therefore, it is currently only meant to be used for overlays, which is the most
common use case.

Support for vectorial text is planned, and should address all these limitations.
pub fn with_save(&mut self, f: impl FnOnce(&mut Frame))

Stores the current transform of the `Frame` and executes the given drawing
operations, restoring the transform afterwards.

This method is useful to compose transforms and perform drawing operations in
different coordinate systems.
pub fn with_clip(&mut self, region: Rectangle<f32>, f: impl FnOnce(&mut Frame))

Executes the given drawing operations within a `Rectangle` region, clipping any
geometry that overflows its bounds. Any transformations performed are local to
the provided closure.

This method is useful to perform drawing operations that need to be clipped.
pub fn translate(&mut self, translation: Vector<f32>)

Applies a translation to the current transform of the `Frame`.
pub fn rotate(&mut self, angle: f32)

Applies a rotation in radians to the current transform of the `Frame`.
pub fn scale(&mut self, scale: f32)

Applies a scaling to the current transform of the `Frame`.
pub fn into_geometry(self) -> Geometry

Produces the `Geometry` representing everything drawn on the `Frame`.
__________
__________

TRAITS:
impl !RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl !UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable
impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>
impl<T> MaybeSend




==============
Struct iced::widget::canvas::Geometry
`pub struct Geometry(_);`
Available on **crate feature `canvas`** only.
A bunch of shapes that can be drawn.

`Geometry` can be easily generated with a `Frame` or stored in a `Cache`.
__________
__________

IMPLEMENTATIONS:
impl Geometry
pub fn into_primitive(self) -> Primitive

Turns the `Geometry` into a `Primitive`.

This can be useful if you are building a custom widget.
__________
__________

TRAITS:
impl Clone, impl Debug, impl !RefUnwindSafe, impl Send, impl Sync
impl Unpin, impl !UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>
impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::canvas::LineDash
`pub struct LineDash<'a> {
    pub segments: &'a [f32],
    pub offset: usize,
}`
Available on **crate feature `canvas`** only.
The dash pattern used when stroking the line.
__________

Fields

`segments: &'a [f32]`

The alternating lengths of lines and gaps which describe the pattern.
`offset: usize`

The offset of `LineDash::segments` to start the pattern.
__________
__________

TRAITS:
impl<'a> Clone, impl<'a> Debug, impl<'a> Default, impl<'a> Copy, impl<'a> RefUnwindSafe
impl<'a> Send, impl<'a> Sync, impl<'a> Unpin, impl<'a> UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<R, P> ReadPrimitive<R>
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::canvas::Path
`pub struct Path { /* private fields */ }`
Available on **crate feature `canvas`** only.
An immutable set of points that may or may not be connected.

A single `Path` can represent different kinds of 2D shapes!
__________
__________

IMPLEMENTATIONS:
impl Path
pub fn new(f: impl FnOnce(&mut Builder)) -> Path

Creates a new `Path` with the provided closure.

Use the `Builder` to configure your `Path`.
pub fn line(from: Point, to: Point) -> Path

Creates a new `Path` representing a line segment given its starting and end
points.
pub fn rectangle(top_left: Point, size: Size<f32>) -> Path

Creates a new `Path` representing a rectangle given its top-left corner
coordinate and its `Size`.
pub fn circle(center: Point, radius: f32) -> Path

Creates a new `Path` representing a circle given its center coordinate and its
radius.
__________
__________

TRAITS:
impl Clone, impl Debug, impl RefUnwindSafe, impl Send, impl Sync
impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>
impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::canvas::Stroke
`pub struct Stroke<'a> {
    pub style: Style,
    pub width: f32,
    pub line_cap: LineCap,
    pub line_join: LineJoin,
    pub line_dash: LineDash<'a>,
}`
Available on **crate feature `canvas`** only.
The style of a stroke.
__________

Fields

`style: Style`

The color or gradient of the stroke.

By default, it is set to a `Style::Solid` with `Color::BLACK`.
`width: f32`

The distance between the two edges of the stroke.
`line_cap: LineCap`

The shape to be used at the end of open subpaths when they are stroked.
`line_join: LineJoin`

The shape to be used at the corners of paths or basic shapes when they are
stroked.
`line_dash: LineDash<'a>`

The dash pattern used when stroking the line.
__________
__________

IMPLEMENTATIONS:
impl<'a> Stroke<'a>
pub fn with_color(self, color: Color) -> Stroke<'a>

Sets the color of the `Stroke`.
pub fn with_width(self, width: f32) -> Stroke<'a>

Sets the width of the `Stroke`.
pub fn with_line_cap(self, line_cap: LineCap) -> Stroke<'a>

Sets the `LineCap` of the `Stroke`.
pub fn with_line_join(self, line_join: LineJoin) -> Stroke<'a>

Sets the `LineJoin` of the `Stroke`.
__________
__________

TRAITS:
impl<'a> Clone, impl<'a> Debug, impl<'a> Default, impl<'a> RefUnwindSafe, impl<'a> Send
impl<'a> Sync, impl<'a> Unpin, impl<'a> UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<R, P> ReadPrimitive<R>, impl<T> ToOwned
impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>
impl<T> MaybeSend




==============
Struct iced::widget::canvas::Text
`pub struct Text {
    pub content: String,
    pub position: Point,
    pub color: Color,
    pub size: f32,
    pub font: Font,
    pub horizontal_alignment: Horizontal,
    pub vertical_alignment: Vertical,
}`
Available on **crate feature `canvas`** only.
A bunch of text that can be drawn to a canvas
__________

Fields

`content: String`

The contents of the text
`position: Point`

The position of the text relative to the alignment properties. By default, this
position will be relative to the top-left corner coordinate meaning that if the
horizontal and vertical alignments are unchanged, this property will tell where
the top-left corner of the text should be placed. By changing the
horizontal_alignment and vertical_alignment properties, you are are able to
change what part of text is placed at this positions. For example, when the
horizontal_alignment and vertical_alignment are set to Center, the center of the
text will be placed at the given position NOT the top-left coordinate.
`color: Color`

The color of the text
`size: f32`

The size of the text
`font: Font`

The font of the text
`horizontal_alignment: Horizontal`

The horizontal alignment of the text
`vertical_alignment: Vertical`

The vertical alignment of the text
__________
__________

TRAITS:
impl Clone, impl Debug, impl Default, impl From<&str>, impl From<String>
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable
impl<R, P> ReadPrimitive<R>, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Trait iced::widget::canvas::Program


`pub trait Program<Message, Theme = Theme> {
    type State: Default + 'static;

    // Required method
    fn draw(
        &self,
        state: &Self::State,
        theme: &Theme,
        bounds: Rectangle<f32>,
        cursor: Cursor
    ) -> Vec<Geometry, Global>;

    // Provided methods
    fn update(
        &self,
        _state: &mut Self::State,
        _event: Event,
        _bounds: Rectangle<f32>,
        _cursor: Cursor
    ) -> (Status, Option<Message>) { ... }
    fn mouse_interaction(
        &self,
        _state: &Self::State,
        _bounds: Rectangle<f32>,
        _cursor: Cursor
    ) -> Interaction { ... }
}`
Available on **crate feature `canvas`** only.


The state and logic of a `Canvas`.

A `Program` can mutate internal state and produce messages for an application.


__________

Required Associated Types



type State: Default + 'static

The internal state mutated by the `Program`.


__________

Required Methods



fn draw( &self, state: &Self::State, theme: &Theme, bounds: Rectangle<f32>,
cursor: Cursor ) -> Vec<Geometry, Global>

Draws the state of the `Program`, producing a bunch of `Geometry`.

`Geometry` can be easily generated with a `Frame` or stored in a `Cache`.


__________

Provided Methods



fn update( &self, _state: &mut Self::State, _event: Event, _bounds:
Rectangle<f32>, _cursor: Cursor ) -> (Status, Option<Message>)

Updates the `State` of the `Program`.

When a `Program` is used in a `Canvas`, the runtime will call this method for
each `Event`.

This method can optionally return a `Message` to notify an application of any
meaningful interactions.

By default, this method does and returns nothing.


fn mouse_interaction( &self, _state: &Self::State, _bounds: Rectangle<f32>,
_cursor: Cursor ) -> Interaction

Returns the current mouse interaction of the `Program`.

The interaction returned will be in effect even if the cursor position is out of
bounds of the program’s `Canvas`.


__________

Implementations on Foreign Types




impl<Message, Theme, T> Program<Message, Theme> for &T where T: Program<Message,
Theme>,

type State = <T as Program<Message, Theme>>::State

fn update( &self, state: &mut <&T as Program<Message, Theme>>::State, event:
Event, bounds: Rectangle<f32>, cursor: Cursor ) -> (Status, Option<Message>)

fn draw( &self, state: &<&T as Program<Message, Theme>>::State, theme: &Theme,
bounds: Rectangle<f32>, cursor: Cursor ) -> Vec<Geometry, Global>

fn mouse_interaction( &self, state: &<&T as Program<Message, Theme>>::State,
bounds: Rectangle<f32>, cursor: Cursor ) -> Interaction


__________

Implementors




==============
Struct iced::widget::checkbox::Appearance
[−]
`pub struct Appearance {
    pub background: Background,
    pub icon_color: Color,
    pub border_radius: f32,
    pub border_width: f32,
    pub border_color: Color,
    pub text_color: Option<Color>,
}`
The appearance of a checkbox.
__________

Fields

`background: Background`

The `Background` of the checkbox.
`icon_color: Color`

The icon `Color` of the checkbox.
`border_radius: f32`

The border radius of the checkbox.
`border_width: f32`

The border width of the checkbox.
`border_color: Color`

The border `Color` of the checkbox.
`text_color: Option<Color>`

The text `Color` of the checkbox.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Copy, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::checkbox::Icon
`pub struct Icon<Font> {
    pub font: Font,
    pub code_point: char,
    pub size: Option<f32>,
}`
The icon in a `Checkbox`.
__________

Fields

`font: Font`

Font that will be used to display the `code_point`,
`code_point: char`

The unicode code point that will be used as the icon.
`size: Option<f32>`

Font size of the content.
__________
__________

TRAITS:
impl<Font> Clone, impl<Font> Debug, impl<Font> PartialEq<Icon<Font>>, impl<Font> StructuralPartialEq, impl<Font> RefUnwindSafe
impl<Font> Send, impl<Font> Sync, impl<Font> Unpin, impl<Font> UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned
impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>
impl<T> MaybeSend




==============
Trait iced::widget::checkbox::StyleSheet


[−]
`pub trait StyleSheet {
    type Style: Default;

    // Required methods
    fn active(&self, style: &Self::Style, is_checked: bool) -> Appearance;
    fn hovered(&self, style: &Self::Style, is_checked: bool) -> Appearance;
}`


A set of rules that dictate the style of a checkbox.


__________

Required Associated Types



type Style: Default

The supported style of the `StyleSheet`.


__________

Required Methods



fn active(&self, style: &Self::Style, is_checked: bool) -> Appearance

Produces the active `Appearance` of a checkbox.


fn hovered(&self, style: &Self::Style, is_checked: bool) -> Appearance

Produces the hovered `Appearance` of a checkbox.


__________

Implementors




impl StyleSheet for Theme

type Style = Checkbox




==============
Type Definition iced::widget::checkbox::Checkbox


`pub type Checkbox<'a, Message, Renderer = Renderer> = Checkbox<'a, Message, Ren
derer>;`


A box that can be checked.




==============
Struct iced::widget::container::Appearance
[−]
`pub struct Appearance {
    pub text_color: Option<Color>,
    pub background: Option<Background>,
    pub border_radius: f32,
    pub border_width: f32,
    pub border_color: Color,
}`
The appearance of a container.
__________

Fields

`text_color: Option<Color>`

The text `Color` of the container.
`background: Option<Background>`

The `Background` of the container.
`border_radius: f32`

The border radius of the container.
`border_width: f32`

The border width of the container.
`border_color: Color`

The border `Color` of the container.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Default, impl Copy, impl RefUnwindSafe
impl Send, impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<R, P> ReadPrimitive<R>
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Trait iced::widget::container::StyleSheet


[−]
`pub trait StyleSheet {
    type Style: Default;

    // Required method
    fn appearance(&self, style: &Self::Style) -> Appearance;
}`


A set of rules that dictate the `Appearance` of a container.


__________

Required Associated Types



type Style: Default

The supported style of the `StyleSheet`.


__________

Required Methods



fn appearance(&self, style: &Self::Style) -> Appearance

Produces the `Appearance` of a container.


__________

Implementations on Foreign Types




impl StyleSheet for fn(_: &Theme) -> Appearance

type Style = Theme

fn appearance( &self, style: &<fn(_: &Theme) -> Appearance as StyleSheet>::Style
) -> Appearance


__________

Implementors




impl StyleSheet for Theme

type Style = Container




==============
Type Definition iced::widget::container::Container


`pub type Container<'a, Message, Renderer = Renderer> = Container<'a, Message, R
enderer>;`


An element decorating some content.




==============
Struct iced::widget::image::Handle
`pub struct Handle { /* private fields */ }`
Available on **crate feature `image`** only.
A handle of some image data.
__________
__________

IMPLEMENTATIONS:
impl Handle
pub fn from_path<T>(path: T) -> Handle where T: Into<PathBuf>,

Creates an image `Handle` pointing to the image of the given path.

Makes an educated guess about the image format by examining the data in the
file.
pub fn from_pixels( width: u32, height: u32, pixels: impl AsRef<[u8]> + Send +
Sync + 'static ) -> Handle

Creates an image `Handle` containing the image pixels directly. This function
expects the input data to be provided as a `Vec<u8>` of RGBA pixels.

This is useful if you have already decoded your image.
pub fn from_memory(bytes: impl AsRef<[u8]> + Send + Sync + 'static) -> Handle

Creates an image `Handle` containing the image data directly.

Makes an educated guess about the image format by examining the given data.

This is useful if you already have your image loaded in-memory, maybe because
you downloaded or generated it procedurally.
pub fn id(&self) -> u64

Returns the unique identifier of the `Handle`.
pub fn data(&self) -> &Data

Returns a reference to the image `Data`.
__________
__________

TRAITS:
impl Clone, impl Debug, impl<T> From<T>, impl Hash, impl !RefUnwindSafe
impl Send, impl Sync, impl Unpin, impl !UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> CallHasher, impl<T> Downcast<T>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::image::Viewer
`pub struct Viewer<Handle> { /* private fields */ }`
Available on **crate feature `image`** only.
A frame that displays an image with the ability to zoom in/out and pan.
__________
__________

IMPLEMENTATIONS:
impl<Handle> Viewer<Handle>
pub fn new(handle: Handle) -> Viewer<Handle>

Creates a new `Viewer` with the given `State`.
pub fn padding(self, padding: impl Into<Pixels>) -> Viewer<Handle>

Sets the padding of the `Viewer`.
pub fn width(self, width: impl Into<Length>) -> Viewer<Handle>

Sets the width of the `Viewer`.
pub fn height(self, height: impl Into<Length>) -> Viewer<Handle>

Sets the height of the `Viewer`.
pub fn max_scale(self, max_scale: f32) -> Viewer<Handle>

Sets the max scale applied to the image of the `Viewer`.

Default is `10.0`
pub fn min_scale(self, min_scale: f32) -> Viewer<Handle>

Sets the min scale applied to the image of the `Viewer`.

Default is `0.25`
pub fn scale_step(self, scale_step: f32) -> Viewer<Handle>

Sets the percentage the image of the `Viewer` will be scaled by when zoomed in /
out.

Default is `0.10`
__________
__________

TRAITS:
impl<Message, Renderer, Handle> Widget<Message, Renderer>, impl<Handle> RefUnwindSafe, impl<Handle> Send, impl<Handle> Sync, impl<Handle> Unpin
impl<Handle> UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Type Definition iced::widget::image::Image


`pub type Image = Image<Handle>;`
Available on **crate feature `image`** only.


A frame that displays an image.




==============
Struct iced::widget::image::viewer::State
`pub struct State { /* private fields */ }`
Available on **crate feature `image`** only.
The local state of a `Viewer`.
__________
__________

IMPLEMENTATIONS:
impl State
pub fn new() -> State

Creates a new `State`.
pub fn is_cursor_grabbed(&self) -> bool

Returns if the cursor is currently grabbed by the `Viewer`.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Default, impl Copy, impl RefUnwindSafe
impl Send, impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<R, P> ReadPrimitive<R>
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::image::viewer::Viewer
`pub struct Viewer<Handle> { /* private fields */ }`
Available on **crate feature `image`** only.
A frame that displays an image with the ability to zoom in/out and pan.
__________
__________

IMPLEMENTATIONS:
impl<Handle> Viewer<Handle>
pub fn new(handle: Handle) -> Viewer<Handle>

Creates a new `Viewer` with the given `State`.
pub fn padding(self, padding: impl Into<Pixels>) -> Viewer<Handle>

Sets the padding of the `Viewer`.
pub fn width(self, width: impl Into<Length>) -> Viewer<Handle>

Sets the width of the `Viewer`.
pub fn height(self, height: impl Into<Length>) -> Viewer<Handle>

Sets the height of the `Viewer`.
pub fn max_scale(self, max_scale: f32) -> Viewer<Handle>

Sets the max scale applied to the image of the `Viewer`.

Default is `10.0`
pub fn min_scale(self, min_scale: f32) -> Viewer<Handle>

Sets the min scale applied to the image of the `Viewer`.

Default is `0.25`
pub fn scale_step(self, scale_step: f32) -> Viewer<Handle>

Sets the percentage the image of the `Viewer` will be scaled by when zoomed in /
out.

Default is `0.10`
__________
__________

TRAITS:
impl<Message, Renderer, Handle> Widget<Message, Renderer>, impl<Handle> RefUnwindSafe, impl<Handle> Send, impl<Handle> Sync, impl<Handle> Unpin
impl<Handle> UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Macro iced::widget::column


macro_rules! column {
    () => { ... };
    ($($x:expr),+ $(,)?) => { ... };
}


Creates a `Column` with the given children.




==============
Macro iced::widget::row


macro_rules! row {
    () => { ... };
    ($($x:expr),+ $(,)?) => { ... };
}


Creates a `Row` with the given children.




==============
Type Definition iced::widget::mouse_area::MouseArea


`pub type MouseArea<'a, Message, Renderer = Renderer> = MouseArea<'a, Message, R
enderer>;`


A container intercepting mouse events.




==============
Enum iced::widget::pane_grid::Axis
`pub enum Axis {
    Horizontal,
    Vertical,
}`
A fixed reference line for the measurement of coordinates.
__________

Variants


Horizontal

The horizontal axis: —

Vertical

The vertical axis: |
__________
__________

IMPLEMENTATIONS:
impl Axis
pub fn split( &self, rectangle: &Rectangle<f32>, ratio: f32, spacing: f32 ) ->
(Rectangle<f32>, Rectangle<f32>)

Splits the provided `Rectangle` on the current `Axis` with the given `ratio` and
`spacing`.
pub fn split_line_bounds( &self, rectangle: Rectangle<f32>, ratio: f32, spacing:
f32 ) -> Rectangle<f32>

Calculates the bounds of the split line in a `Rectangle` region.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Hash, impl PartialEq<Axis>, impl Copy
impl Eq, impl StructuralEq, impl StructuralPartialEq, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> CallHasher, impl<T> Downcast<T>, impl<Q, K> Equivalent<K>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::widget::pane_grid::Configuration
`pub enum Configuration<T> {
    Split {
        axis: Axis,
        ratio: f32,
        a: Box<Configuration<T>, Global>,
        b: Box<Configuration<T>, Global>,
    },
    Pane(T),
}`
The arrangement of a `PaneGrid`.
__________

Variants


Split
#### Fields
`axis: Axis`

The direction of the split.
`ratio: f32`

The ratio of the split in [0.0, 1.0].
`a: Box<Configuration<T>, Global>`

The left/top `Configuration` of the split.
`b: Box<Configuration<T>, Global>`

The right/bottom `Configuration` of the split.

A split of the available space.

Pane(T)

A `Pane`.
__________
__________

TRAITS:
impl<T> Clone, impl<T> Debug, impl<T> RefUnwindSafe, impl<T> Send, impl<T> Sync
impl<T> Unpin, impl<T> UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>
impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::widget::pane_grid::Direction
`pub enum Direction {
    Up,
    Down,
    Left,
    Right,
}`
A four cardinal direction.
__________

Variants


Up

↑

Down

↓

Left

←

Right

→
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<Direction>, impl Copy, impl Eq
impl StructuralEq, impl StructuralPartialEq, impl RefUnwindSafe, impl Send, impl Sync
impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<Q, K> Equivalent<K>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::widget::pane_grid::DragEvent
`pub enum DragEvent {
    Picked {
        pane: Pane,
    },
    Dropped {
        pane: Pane,
        target: Pane,
    },
    Canceled {
        pane: Pane,
    },
}`
An event produced during a drag and drop interaction of a `PaneGrid`.
__________

Variants


Picked
#### Fields
`pane: Pane`

The picked `Pane`.

A `Pane` was picked for dragging.

Dropped
#### Fields
`pane: Pane`

The picked `Pane`.
`target: Pane`

The `Pane` where the picked one was dropped on.

A `Pane` was dropped on top of another `Pane`.

Canceled
#### Fields
`pane: Pane`

The picked `Pane`.

A `Pane` was picked and then dropped outside of other `Pane` boundaries.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Copy, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::widget::pane_grid::Node
`pub enum Node {
    Split {
        id: Split,
        axis: Axis,
        ratio: f32,
        a: Box<Node, Global>,
        b: Box<Node, Global>,
    },
    Pane(Pane),
}`
A layout node of a `PaneGrid`.
__________

Variants


Split
#### Fields
`id: Split`

The `Split` of this `Node`.
`axis: Axis`

The direction of the split.
`ratio: f32`

The ratio of the split in [0.0, 1.0].
`a: Box<Node, Global>`

The left/top `Node` of the split.
`b: Box<Node, Global>`

The right/bottom `Node` of the split.

The region of this `Node` is split into two.

Pane(Pane)

The region of this `Node` is taken by a `Pane`.
__________
__________

IMPLEMENTATIONS:
impl Node
pub fn splits(&self) -> impl Iterator<Item = &Split>

Returns an iterator over each `Split` in this `Node`.
pub fn pane_regions( &self, spacing: f32, size: Size<f32> ) -> BTreeMap<Pane,
Rectangle<f32>, Global>

Returns the rectangular region for each `Pane` in the `Node` given the spacing
between panes and the total available space.
pub fn split_regions( &self, spacing: f32, size: Size<f32> ) -> BTreeMap<Split,
(Axis, Rectangle<f32>, f32), Global>

Returns the axis, rectangular region, and ratio for each `Split` in the `Node`
given the spacing between panes and the total available space.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Hash, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> CallHasher, impl<T> Downcast<T>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned
impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>
impl<T> MaybeSend




==============
Struct iced::widget::pane_grid::Line
[−]
`pub struct Line {
    pub color: Color,
    pub width: f32,
}`
A line.

It is normally used to define the highlight of something, like a split.
__________

Fields

`color: Color`

The `Color` of the `Line`.
`width: f32`

The width of the `Line`.
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<Line>, impl Copy, impl StructuralPartialEq
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::pane_grid::Pane
`pub struct Pane(_);`
A rectangular region in a `PaneGrid` used to display widgets.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Hash, impl Ord, impl PartialEq<Pane>
impl PartialOrd<Pane>, impl Copy, impl Eq, impl StructuralEq, impl StructuralPartialEq
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> CallHasher
impl<T> Downcast<T>, impl<Q, K> Equivalent<K>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>
impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::pane_grid::ResizeEvent
`pub struct ResizeEvent {
    pub split: Split,
    pub ratio: f32,
}`
An event produced during a resize interaction of a `PaneGrid`.
__________

Fields

`split: Split`

The `Split` that is being dragged for resizing.
`ratio: f32`

The new ratio of the `Split`.

The ratio is a value in [0, 1], representing the exact position of a `Split`
between two panes.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Copy, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::pane_grid::Split
`pub struct Split(_);`
A divider that splits a region in a `PaneGrid` into two different panes.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Hash, impl Ord, impl PartialEq<Split>
impl PartialOrd<Split>, impl Copy, impl Eq, impl StructuralEq, impl StructuralPartialEq
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> CallHasher
impl<T> Downcast<T>, impl<Q, K> Equivalent<K>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>
impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::pane_grid::State
`pub struct State<T> {
    pub panes: HashMap<Pane, T, RandomState>,
    pub internal: Internal,
    /* private fields */
}`
The state of a `PaneGrid`.

It keeps track of the state of each `Pane` and the position of each `Split`.

The `State` needs to own any mutable contents a `Pane` may need. This is why
this struct is generic over the type `T`. Values of this type are provided to
the view function of `PaneGrid::new` for displaying each `Pane`.
__________

Fields

`panes: HashMap<Pane, T, RandomState>`

The panes of the `PaneGrid`.
`internal: Internal`

The internal state of the `PaneGrid`.
__________
__________

IMPLEMENTATIONS:
impl<T> State<T>
pub fn new(first_pane_state: T) -> (State<T>, Pane)

Creates a new `State`, initializing the first pane with the provided state.

Alongside the `State`, it returns the first `Pane` identifier.
pub fn with_configuration(config: impl Into<Configuration<T>>) -> State<T>

Creates a new `State` with the given `Configuration`.
pub fn len(&self) -> usize

Returns the total amount of panes in the `State`.
pub fn is_empty(&self) -> bool

Returns `true` if the amount of panes in the `State` is 0.
pub fn get(&self, pane: &Pane) -> Option<&T>

Returns the internal state of the given `Pane`, if it exists.
pub fn get_mut(&mut self, pane: &Pane) -> Option<&mut T>

Returns the internal state of the given `Pane` with mutability, if it exists.
pub fn iter(&self) -> impl Iterator<Item = (&Pane, &T)>

Returns an iterator over all the panes of the `State`, alongside its internal
state.
pub fn iter_mut(&mut self) -> impl Iterator<Item = (&Pane, &mut T)>

Returns a mutable iterator over all the panes of the `State`, alongside its
internal state.
pub fn layout(&self) -> &Node

Returns the layout of the `State`.
pub fn adjacent(&self, pane: &Pane, direction: Direction) -> Option<Pane>

Returns the adjacent `Pane` of another `Pane` in the given direction, if there
is one.
pub fn split( &mut self, axis: Axis, pane: &Pane, state: T ) -> Option<(Pane,
Split)>

Splits the given `Pane` into two in the given `Axis` and initializing the new
`Pane` with the provided internal state.
pub fn swap(&mut self, a: &Pane, b: &Pane)

Swaps the position of the provided panes in the `State`.

If you want to swap panes on drag and drop in your `PaneGrid`, you will need to
call this method when handling a `DragEvent`.
pub fn resize(&mut self, split: &Split, ratio: f32)

Resizes two panes by setting the position of the provided `Split`.

The ratio is a value in [0, 1], representing the exact position of a `Split`
between two panes.

If you want to enable resize interactions in your `PaneGrid`, you will need to
call this method when handling a `ResizeEvent`.
pub fn close(&mut self, pane: &Pane) -> Option<(T, Pane)>

Closes the given `Pane` and returns its internal state and its closest sibling,
if it exists.
pub fn maximize(&mut self, pane: &Pane)

Maximize the given `Pane`. Only this pane will be rendered by the `PaneGrid`
until `Self::restore()` is called.
pub fn restore(&mut self)

Restore the currently maximized `Pane` to it’s normal size. All panes will be
rendered by the `PaneGrid`.
pub fn maximized(&self) -> Option<Pane>

Returns the maximized `Pane` of the `PaneGrid`.
__________
__________

TRAITS:
impl<T> Clone, impl<T> Debug, impl<T> RefUnwindSafe, impl<T> Send, impl<T> Sync
impl<T> Unpin, impl<T> UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>
impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Trait iced::widget::pane_grid::StyleSheet


[−]
`pub trait StyleSheet {
    type Style: Default;

    // Required methods
    fn picked_split(&self, style: &Self::Style) -> Option<Line>;
    fn hovered_split(&self, style: &Self::Style) -> Option<Line>;
}`


A set of rules that dictate the style of a container.


__________

Required Associated Types



type Style: Default

The supported style of the `StyleSheet`.


__________

Required Methods



fn picked_split(&self, style: &Self::Style) -> Option<Line>

The `Line` to draw when a split is picked.


fn hovered_split(&self, style: &Self::Style) -> Option<Line>

The `Line` to draw when a split is hovered.


__________

Implementors




impl StyleSheet for Theme

type Style = PaneGrid




==============
Type Definition iced::widget::pane_grid::Content


`pub type Content<'a, Message, Renderer = Renderer> = Content<'a, Message, Rende
rer>;`


The content of a `Pane`.




==============
Type Definition iced::widget::pane_grid::PaneGrid


`pub type PaneGrid<'a, Message, Renderer = Renderer> = PaneGrid<'a, Message, Ren
derer>;`


A collection of panes distributed using either vertical or horizontal splits to
completely fill the space available.

[Pane grid - Iced]




==============
Type Definition iced::widget::pane_grid::TitleBar


`pub type TitleBar<'a, Message, Renderer = Renderer> = TitleBar<'a, Message, Ren
derer>;`


The title bar of a `Pane`.




==============
Enum iced::widget::pick_list::Handle
`pub enum Handle<Font> {
    Arrow {
        size: Option<f32>,
    },
    Static(Icon<Font>),
    Dynamic {
        closed: Icon<Font>,
        open: Icon<Font>,
    },
    None,
}`
The handle to the right side of the `PickList`.
__________

Variants


Arrow
#### Fields
`size: Option<f32>`

Font size of the content.

Displays an arrow icon (▼).

This is the default.

Static(Icon<Font>)

A custom static handle.

Dynamic
#### Fields
`closed: Icon<Font>`

The `Icon` used when `PickList` is closed.
`open: Icon<Font>`

The `Icon` used when `PickList` is open.

A custom dynamic handle.

None

No handle will be shown.
__________
__________

TRAITS:
impl<Font> Clone, impl<Font> Debug, impl<Font> Default, impl<Font> PartialEq<Handle<Font>>, impl<Font> StructuralPartialEq
impl<Font> RefUnwindSafe, impl<Font> Send, impl<Font> Sync, impl<Font> Unpin, impl<Font> UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable
impl<R, P> ReadPrimitive<R>, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::pick_list::Appearance
[−]
`pub struct Appearance {
    pub text_color: Color,
    pub placeholder_color: Color,
    pub handle_color: Color,
    pub background: Background,
    pub border_radius: f32,
    pub border_width: f32,
    pub border_color: Color,
}`
The appearance of a pick list.
__________

Fields

`text_color: Color`

The text `Color` of the pick list.
`placeholder_color: Color`

The placeholder `Color` of the pick list.
`handle_color: Color`

The handle `Color` of the pick list.
`background: Background`

The `Background` of the pick list.
`border_radius: f32`

The border radius of the pick list.
`border_width: f32`

The border width of the pick list.
`border_color: Color`

The border color of the pick list.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Copy, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::pick_list::Icon
`pub struct Icon<Font> {
    pub font: Font,
    pub code_point: char,
    pub size: Option<f32>,
}`
The icon of a `Handle`.
__________

Fields

`font: Font`

Font that will be used to display the `code_point`,
`code_point: char`

The unicode code point that will be used as the icon.
`size: Option<f32>`

Font size of the content.
__________
__________

TRAITS:
impl<Font> Clone, impl<Font> Debug, impl<Font> PartialEq<Icon<Font>>, impl<Font> StructuralPartialEq, impl<Font> RefUnwindSafe
impl<Font> Send, impl<Font> Sync, impl<Font> Unpin, impl<Font> UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned
impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>
impl<T> MaybeSend




==============
Trait iced::widget::pick_list::StyleSheet


[−]
`pub trait StyleSheet {
    type Style: Default + Clone;

    // Required methods
    fn active(&self, style: &Self::Style) -> Appearance;
    fn hovered(&self, style: &Self::Style) -> Appearance;
}`


A set of rules that dictate the style of a container.


__________

Required Associated Types



type Style: Default + Clone

The supported style of the `StyleSheet`.


__________

Required Methods



fn active(&self, style: &Self::Style) -> Appearance

Produces the active `Appearance` of a pick list.


fn hovered(&self, style: &Self::Style) -> Appearance

Produces the hovered `Appearance` of a pick list.


__________

Implementors




impl StyleSheet for Theme

type Style = PickList




==============
Type Definition iced::widget::pick_list::PickList


`pub type PickList<'a, T, Message, Renderer = Renderer> = PickList<'a, T, Messag
e, Renderer>;`


A widget allowing the selection of a single value from a list of options.




==============
Struct iced::widget::progress_bar::Appearance
[−]
`pub struct Appearance {
    pub background: Background,
    pub bar: Background,
    pub border_radius: f32,
}`
The appearance of a progress bar.
__________

Fields

`background: Background`

The `Background` of the progress bar.
`bar: Background`

The `Background` of the bar of the progress bar.
`border_radius: f32`

The border radius of the progress bar.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Copy, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::progress_bar::ProgressBar
`pub struct ProgressBar<Renderer>   where
    Renderer: Renderer,
    <Renderer as Renderer>::Theme: StyleSheet,{ /* private fields */ }`
A bar that displays progress.

__________

Example
`let value = 50.0;

ProgressBar::new(0.0..=100.0, value);`

[Progress bar drawn with iced_wgpu]
__________
__________

IMPLEMENTATIONS:
impl<Renderer> ProgressBar<Renderer> where Renderer: Renderer, <Renderer as
Renderer>::Theme: StyleSheet,
pub const DEFAULT_HEIGHT: f32 = 30f32

The default height of a `ProgressBar`.
pub fn new(range: RangeInclusive<f32>, value: f32) -> ProgressBar<Renderer>

Creates a new `ProgressBar`.

It expects:

* an inclusive range of possible values
* the current value of the `ProgressBar`
pub fn width(self, width: impl Into<Length>) -> ProgressBar<Renderer>

Sets the width of the `ProgressBar`.
pub fn height(self, height: impl Into<Length>) -> ProgressBar<Renderer>

Sets the height of the `ProgressBar`.
pub fn style( self, style: impl Into<<<Renderer as Renderer>::Theme as
StyleSheet>::Style> ) -> ProgressBar<Renderer>

Sets the style of the `ProgressBar`.
__________
__________

TRAITS:
impl<Message, Renderer> Widget<Message, Renderer>, impl<Renderer> RefUnwindSafe, impl<Renderer> Send, impl<Renderer> Sync, impl<Renderer> Unpin
impl<Renderer> UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Trait iced::widget::progress_bar::StyleSheet


[−]
`pub trait StyleSheet {
    type Style: Default;

    // Required method
    fn appearance(&self, style: &Self::Style) -> Appearance;
}`


A set of rules that dictate the style of a progress bar.


__________

Required Associated Types



type Style: Default

The supported style of the `StyleSheet`.


__________

Required Methods



fn appearance(&self, style: &Self::Style) -> Appearance

Produces the `Appearance` of the progress bar.


__________

Implementations on Foreign Types




impl StyleSheet for fn(_: &Theme) -> Appearance

type Style = Theme

fn appearance( &self, style: &<fn(_: &Theme) -> Appearance as StyleSheet>::Style
) -> Appearance


__________

Implementors




impl StyleSheet for Theme

type Style = ProgressBar




==============
Enum iced::widget::qr_code::Error
`pub enum Error {
    DataTooLong,
    InvalidVersion,
    UnsupportedCharacterSet,
    InvalidEciDesignator,
    InvalidCharacter,
}`
Available on **crate feature `qr_code`** only.
An error that occurred when building a `State` for a `QRCode`.
__________

Variants


DataTooLong

The data is too long to encode in a QR code for the chosen `Version`.

InvalidVersion

The chosen `Version` and `ErrorCorrection` combination is invalid.

UnsupportedCharacterSet

One or more characters in the provided data are not supported by the chosen
`Version`.

InvalidEciDesignator

The chosen ECI designator is invalid. A valid designator should be between 0 and
999999.

InvalidCharacter

A character that does not belong to the character set was found.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Display, impl Error, impl From<QrError>
impl PartialEq<Error>, impl Copy, impl Eq, impl StructuralEq, impl StructuralPartialEq
impl RefUnwindSafe, impl Send, impl Sync, impl Unpin, impl UnwindSafe
impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>
impl<Q, K> Equivalent<K>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<E> Provider, impl<T> ToOwned, impl<T> ToString, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::widget::qr_code::ErrorCorrection
`pub enum ErrorCorrection {
    Low,
    Medium,
    Quartile,
    High,
}`
Available on **crate feature `qr_code`** only.
The error correction level.

It controls the amount of data that can be damaged while still being able to
recover the original information.

A higher error correction level allows for more corrupted data.
__________

Variants


Low

Low error correction. 7% of the data can be restored.

Medium

Medium error correction. 15% of the data can be restored.

Quartile

Quartile error correction. 25% of the data can be restored.

High

High error correction. 30% of the data can be restored.
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<ErrorCorrection>, impl Copy, impl Eq
impl StructuralEq, impl StructuralPartialEq, impl RefUnwindSafe, impl Send, impl Sync
impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<Q, K> Equivalent<K>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::widget::qr_code::Version
`pub enum Version {
    Normal(u8),
    Micro(u8),
}`
Available on **crate feature `qr_code`** only.
The size of a `QRCode`.

The higher the version the larger the grid of cells, and therefore the more
information the `QRCode` can carry.
__________

Variants


Normal(u8)

A normal QR code version. It should be between 1 and 40.

Micro(u8)

A micro QR code version. It should be between 1 and 4.
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<Version>, impl Copy, impl Eq
impl StructuralEq, impl StructuralPartialEq, impl RefUnwindSafe, impl Send, impl Sync
impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<Q, K> Equivalent<K>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::qr_code::QRCode
`pub struct QRCode<'a> { /* private fields */ }`
Available on **crate feature `qr_code`** only.
A type of matrix barcode consisting of squares arranged in a grid which can be
read by an imaging device, such as a camera.
__________
__________

IMPLEMENTATIONS:
impl<'a> QRCode<'a>
pub fn new(state: &'a State) -> QRCode<'a>

Creates a new `QRCode` with the provided `State`.
pub fn color(self, dark: Color, light: Color) -> QRCode<'a>

Sets both the dark and light `Color`s of the `QRCode`.
pub fn cell_size(self, cell_size: u16) -> QRCode<'a>

Sets the size of the squares of the grid cell of the `QRCode`.
__________
__________

TRAITS:
impl<'a> Debug, impl<'a, Message, B, T> Widget<Message, Renderer<B, T>>, impl<'a> !RefUnwindSafe, impl<'a> !Send, impl<'a> !Sync
impl<'a> Unpin, impl<'a> !UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>




==============
Struct iced::widget::qr_code::State
`pub struct State { /* private fields */ }`
Available on **crate feature `qr_code`** only.
The state of a `QRCode`.

It stores the data that will be displayed.
__________
__________

IMPLEMENTATIONS:
impl State
pub fn new(data: impl AsRef<[u8]>) -> Result<State, Error>

Creates a new `State` with the provided data.

This method uses an `ErrorCorrection::Medium` and chooses the smallest size to
display the data.
pub fn with_error_correction( data: impl AsRef<[u8]>, error_correction:
ErrorCorrection ) -> Result<State, Error>

Creates a new `State` with the provided `ErrorCorrection`.
pub fn with_version( data: impl AsRef<[u8]>, version: Version, error_correction:
ErrorCorrection ) -> Result<State, Error>

Creates a new `State` with the provided `Version` and `ErrorCorrection`.
__________
__________

TRAITS:
impl Debug, impl !RefUnwindSafe, impl Send, impl !Sync, impl Unpin
impl !UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::radio::Appearance
[−]
`pub struct Appearance {
    pub background: Background,
    pub dot_color: Color,
    pub border_width: f32,
    pub border_color: Color,
    pub text_color: Option<Color>,
}`
The appearance of a radio button.
__________

Fields

`background: Background`

The `Background` of the radio button.
`dot_color: Color`

The `Color` of the dot of the radio button.
`border_width: f32`

The border width of the radio button.
`border_color: Color`

The border `Color` of the radio button.
`text_color: Option<Color>`

The text `Color` of the radio button.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Copy, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Trait iced::widget::radio::StyleSheet


[−]
`pub trait StyleSheet {
    type Style: Default;

    // Required methods
    fn active(&self, style: &Self::Style, is_selected: bool) -> Appearance;
    fn hovered(&self, style: &Self::Style, is_selected: bool) -> Appearance;
}`


A set of rules that dictate the style of a radio button.


__________

Required Associated Types



type Style: Default

The supported style of the `StyleSheet`.


__________

Required Methods



fn active(&self, style: &Self::Style, is_selected: bool) -> Appearance

Produces the active `Appearance` of a radio button.


fn hovered(&self, style: &Self::Style, is_selected: bool) -> Appearance

Produces the hovered `Appearance` of a radio button.


__________

Implementors




impl StyleSheet for Theme

type Style = Radio




==============
Type Definition iced::widget::radio::Radio


`pub type Radio<Message, Renderer = Renderer> = Radio<Message, Renderer>;`


A circular button representing a choice.




==============
Enum iced::widget::rule::FillMode
[−]
`pub enum FillMode {
    Full,
    Percent(f32),
    Padded(u16),
    AsymmetricPadding(u16, u16),
}`
The fill mode of a rule.
__________

Variants


Full

Fill the whole length of the container.

Percent(f32)

Fill a percent of the length of the container. The rule will be centered in that
container.

The range is `[0.0, 100.0]`.

Padded(u16)

Uniform offset from each end, length units.

AsymmetricPadding(u16, u16)

Different offset on each end of the rule, length units. First = top or left.
__________
__________

IMPLEMENTATIONS:
impl FillMode

pub fn fill(&self, space: f32) -> (f32, f32)

Return the starting offset and length of the rule.

* `space` - The space to fill.
Returns

* (starting_offset, length)
__________
__________

TRAITS:
impl Clone, impl Debug, impl Copy, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::rule::Appearance
[−]
`pub struct Appearance {
    pub color: Color,
    pub width: u16,
    pub radius: f32,
    pub fill_mode: FillMode,
}`
The appearance of a rule.
__________

Fields

`color: Color`

The color of the rule.
`width: u16`

The width (thickness) of the rule line.
`radius: f32`

The radius of the line corners.
`fill_mode: FillMode`

The `FillMode` of the rule.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Copy, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::rule::Rule
`pub struct Rule<Renderer>   where
    Renderer: Renderer,
    <Renderer as Renderer>::Theme: StyleSheet,{ /* private fields */ }`
Display a horizontal or vertical rule for dividing content.
__________
__________

IMPLEMENTATIONS:
impl<Renderer> Rule<Renderer> where Renderer: Renderer, <Renderer as
Renderer>::Theme: StyleSheet,
pub fn horizontal(height: impl Into<Pixels>) -> Rule<Renderer>

Creates a horizontal `Rule` with the given height.
pub fn vertical(width: impl Into<Pixels>) -> Rule<Renderer>

Creates a vertical `Rule` with the given width.
pub fn style( self, style: impl Into<<<Renderer as Renderer>::Theme as
StyleSheet>::Style> ) -> Rule<Renderer>

Sets the style of the `Rule`.
__________
__________

TRAITS:
impl<Message, Renderer> Widget<Message, Renderer>, impl<Renderer> RefUnwindSafe, impl<Renderer> Send, impl<Renderer> Sync, impl<Renderer> Unpin
impl<Renderer> UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Trait iced::widget::rule::StyleSheet


[−]
`pub trait StyleSheet {
    type Style: Default;

    // Required method
    fn appearance(&self, style: &Self::Style) -> Appearance;
}`


A set of rules that dictate the style of a rule.


__________

Required Associated Types



type Style: Default

The supported style of the `StyleSheet`.


__________

Required Methods



fn appearance(&self, style: &Self::Style) -> Appearance

Produces the style of a rule.


__________

Implementations on Foreign Types




impl StyleSheet for fn(_: &Theme) -> Appearance

type Style = Theme

fn appearance( &self, style: &<fn(_: &Theme) -> Appearance as StyleSheet>::Style
) -> Appearance


__________

Implementors




impl StyleSheet for Theme

type Style = Rule




==============
Struct iced::widget::scrollable::Id
`pub struct Id(_);`
The identifier of a `Scrollable`.
__________
__________

IMPLEMENTATIONS:
impl Id
pub fn new(id: impl Into<Cow<'static, str>>) -> Id

Creates a custom `Id`.
pub fn unique() -> Id

Creates a unique `Id`.

This function produces a different `Id` every time it is called.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Hash, impl PartialEq<Id>, impl Eq
impl StructuralEq, impl StructuralPartialEq, impl RefUnwindSafe, impl Send, impl Sync
impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> CallHasher, impl<T> Downcast<T>, impl<Q, K> Equivalent<K>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned
impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>
impl<T> MaybeSend




==============
Struct iced::widget::scrollable::Properties
`pub struct Properties { /* private fields */ }`
Properties of a scrollbar within a `Scrollable`.
__________
__________

IMPLEMENTATIONS:
impl Properties
pub fn new() -> Properties

Creates new `Properties` for use in a `Scrollable`.
pub fn width(self, width: impl Into<Pixels>) -> Properties

Sets the scrollbar width of the `Scrollable` . Silently enforces a minimum width
of 1.
pub fn margin(self, margin: impl Into<Pixels>) -> Properties

Sets the scrollbar margin of the `Scrollable` .
pub fn scroller_width(self, scroller_width: impl Into<Pixels>) -> Properties

Sets the scroller width of the `Scrollable` . Silently enforces a minimum width
of 1.
__________
__________

TRAITS:
impl Debug, impl Default, impl RefUnwindSafe, impl Send, impl Sync
impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<R, P> ReadPrimitive<R>, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>
impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::scrollable::RelativeOffset
`pub struct RelativeOffset {
    pub x: f32,
    pub y: f32,
}`
The amount of offset in each direction of a `Scrollable`.

A value of `0.0` means start, while `1.0` means end.
__________

Fields

`x: f32`

The amount of horizontal offset
`y: f32`

The amount of vertical offset
__________
__________

IMPLEMENTATIONS:
impl RelativeOffset
pub const START: RelativeOffset = Self{ x: 0.0, y: 0.0,}

A relative offset that points to the top-left of a `Scrollable`.
pub const END: RelativeOffset = Self{ x: 1.0, y: 1.0,}

A relative offset that points to the bottom-right of a `Scrollable`.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Default, impl PartialEq<RelativeOffset>, impl Copy
impl StructuralPartialEq, impl RefUnwindSafe, impl Send, impl Sync, impl Unpin
impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> IsDefault, impl<T> Pointable, impl<R, P> ReadPrimitive<R>, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::scrollable::Scrollbar
[−]
`pub struct Scrollbar {
    pub background: Option<Background>,
    pub border_radius: f32,
    pub border_width: f32,
    pub border_color: Color,
    pub scroller: Scroller,
}`
The appearance of a scrollable.
__________

Fields

`background: Option<Background>`

The `Background` of a scrollable.
`border_radius: f32`

The border radius of a scrollable.
`border_width: f32`

The border width of a scrollable.
`border_color: Color`

The border `Color` of a scrollable.
`scroller: Scroller`

The appearance of the `Scroller` of a scrollable.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Copy, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::scrollable::Scroller
[−]
`pub struct Scroller {
    pub color: Color,
    pub border_radius: f32,
    pub border_width: f32,
    pub border_color: Color,
}`
The appearance of the scroller of a scrollable.
__________

Fields

`color: Color`

The `Color` of the scroller.
`border_radius: f32`

The border radius of the scroller.
`border_width: f32`

The border width of the scroller.
`border_color: Color`

The border `Color` of the scroller.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Copy, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Trait iced::widget::scrollable::StyleSheet


[−]
`pub trait StyleSheet {
    type Style: Default;

    // Required methods
    fn active(&self, style: &Self::Style) -> Scrollbar;
    fn hovered(
        &self,
        style: &Self::Style,
        is_mouse_over_scrollbar: bool
    ) -> Scrollbar;

    // Provided methods
    fn dragging(&self, style: &Self::Style) -> Scrollbar { ... }
    fn active_horizontal(&self, style: &Self::Style) -> Scrollbar { ... }
    fn hovered_horizontal(
        &self,
        style: &Self::Style,
        is_mouse_over_scrollbar: bool
    ) -> Scrollbar { ... }
    fn dragging_horizontal(&self, style: &Self::Style) -> Scrollbar { ... }
}`


A set of rules that dictate the style of a scrollable.


__________

Required Associated Types



type Style: Default

The supported style of the `StyleSheet`.


__________

Required Methods



fn active(&self, style: &Self::Style) -> Scrollbar

Produces the style of an active scrollbar.


fn hovered( &self, style: &Self::Style, is_mouse_over_scrollbar: bool ) ->
Scrollbar

Produces the style of a scrollbar when the scrollable is being hovered.


__________

Provided Methods



fn dragging(&self, style: &Self::Style) -> Scrollbar

Produces the style of a scrollbar that is being dragged.


fn active_horizontal(&self, style: &Self::Style) -> Scrollbar

Produces the style of an active horizontal scrollbar.


fn hovered_horizontal( &self, style: &Self::Style, is_mouse_over_scrollbar: bool
) -> Scrollbar

Produces the style of a horizontal scrollbar when the scrollable is being
hovered.


fn dragging_horizontal(&self, style: &Self::Style) -> Scrollbar

Produces the style of a horizontal scrollbar that is being dragged.


__________

Implementors




impl StyleSheet for Theme

type Style = Scrollable




==============
Type Definition iced::widget::scrollable::Scrollable


`pub type Scrollable<'a, Message, Renderer = Renderer> = Scrollable<'a, Message,
 Renderer>;`


A widget that can vertically display an infinite amount of content with a
scrollbar.




==============
Enum iced::widget::slider::HandleShape
[−]
`pub enum HandleShape {
    Circle {
        radius: f32,
    },
    Rectangle {
        width: u16,
        border_radius: f32,
    },
}`
The shape of the handle of a slider.
__________

Variants


Circle
#### Fields
`radius: f32`

The radius of the circle.

A circular handle.

Rectangle
#### Fields
`width: u16`

The width of the rectangle.
`border_radius: f32`

The border radius of the corners of the rectangle.

A rectangular shape.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Copy, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::slider::Appearance
[−]
`pub struct Appearance {
    pub rail: Rail,
    pub handle: Handle,
}`
The appearance of a slider.
__________

Fields

`rail: Rail`

The colors of the rail of the slider.
`handle: Handle`

The appearance of the `Handle` of the slider.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Copy, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::slider::Handle
[−]
`pub struct Handle {
    pub shape: HandleShape,
    pub color: Color,
    pub border_width: f32,
    pub border_color: Color,
}`
The appearance of the handle of a slider.
__________

Fields

`shape: HandleShape`

The shape of the handle.
`color: Color`

The `Color` of the handle.
`border_width: f32`

The border width of the handle.
`border_color: Color`

The border `Color` of the handle.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Copy, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::slider::Rail
[−]
`pub struct Rail {
    pub colors: (Color, Color),
    pub width: f32,
}`
The appearance of a slider rail
__________

Fields

`colors: (Color, Color)`

The colors of the rail of the slider.
`width: f32`

The width of the stroke of a slider rail.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Copy, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::slider::Slider
`pub struct Slider<'a, T, Message, Renderer> where
    Renderer: Renderer,
    <Renderer as Renderer>::Theme: StyleSheet,{ /* private fields */ }`
An horizontal bar and a handle that selects a single value from a range of
values.

A `Slider` will try to fill the horizontal space of its container.

The `Slider` range of numeric values is generic and its step size defaults to 1
unit.

__________

Example
`#[derive(Clone)]
pub enum Message {
    SliderChanged(f32),
}

let value = 50.0;

Slider::new(0.0..=100.0, value, Message::SliderChanged);`

[Slider drawn by Coffee’s renderer]
__________
__________

IMPLEMENTATIONS:
impl<'a, T, Message, Renderer> Slider<'a, T, Message, Renderer> where T: Copy +
From<u8> + PartialOrd<T>, Message: Clone, Renderer: Renderer, <Renderer as
Renderer>::Theme: StyleSheet,
pub const DEFAULT_HEIGHT: f32 = 22f32

The default height of a `Slider`.
pub fn new<F>( range: RangeInclusive<T>, value: T, on_change: F ) -> Slider<'a,
T, Message, Renderer> where F: 'a + Fn(T) -> Message,

Creates a new `Slider`.

It expects:

* an inclusive range of possible values
* the current value of the `Slider`
* a function that will be called when the `Slider` is dragged. It receives the
  new value of the `Slider` and must produce a `Message`.
pub fn on_release(self, on_release: Message) -> Slider<'a, T, Message, Renderer>

Sets the release message of the `Slider`. This is called when the mouse is
released from the slider.

Typically, the user’s interaction with the slider is finished when this message
is produced. This is useful if you need to spawn a long-running task from the
slider’s result, where the default on_change message could create too many
events.
pub fn width(self, width: impl Into<Length>) -> Slider<'a, T, Message, Renderer>

Sets the width of the `Slider`.
pub fn height( self, height: impl Into<Pixels> ) -> Slider<'a, T, Message,
Renderer>

Sets the height of the `Slider`.
pub fn style( self, style: impl Into<<<Renderer as Renderer>::Theme as
StyleSheet>::Style> ) -> Slider<'a, T, Message, Renderer>

Sets the style of the `Slider`.
pub fn step(self, step: T) -> Slider<'a, T, Message, Renderer>

Sets the step size of the `Slider`.
__________
__________

TRAITS:
impl<'a, T, Message, Renderer> Widget<Message, Renderer>, impl<'a, T, Message, Renderer> !RefUnwindSafe, impl<'a, T, Message, Renderer> !Send, impl<'a, T, Message, Renderer> !Sync, impl<'a, T, Message, Renderer> Unpin
impl<'a, T, Message, Renderer> !UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>




==============
Struct iced::widget::slider::State
`pub struct State { /* private fields */ }`
The local state of a `Slider`.
__________
__________

IMPLEMENTATIONS:
impl State
pub fn new() -> State

Creates a new `State`.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Default, impl PartialEq<State>, impl Copy
impl Eq, impl StructuralEq, impl StructuralPartialEq, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<Q, K> Equivalent<K>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> IsDefault, impl<T> Pointable
impl<R, P> ReadPrimitive<R>, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Trait iced::widget::slider::StyleSheet


[−]
`pub trait StyleSheet {
    type Style: Default;

    // Required methods
    fn active(&self, style: &Self::Style) -> Appearance;
    fn hovered(&self, style: &Self::Style) -> Appearance;
    fn dragging(&self, style: &Self::Style) -> Appearance;
}`


A set of rules that dictate the style of a slider.


__________

Required Associated Types



type Style: Default

The supported style of the `StyleSheet`.


__________

Required Methods



fn active(&self, style: &Self::Style) -> Appearance

Produces the style of an active slider.


fn hovered(&self, style: &Self::Style) -> Appearance

Produces the style of an hovered slider.


fn dragging(&self, style: &Self::Style) -> Appearance

Produces the style of a slider that is being dragged.


__________

Implementors




impl StyleSheet for Theme

type Style = Slider




==============
Struct iced::widget::Canvas
`pub struct Canvas<Message, Theme, P>  where
    P: Program<Message, Theme>,{ /* private fields */ }`
Available on **crate feature `canvas`** only.
A widget capable of drawing 2D graphics.

### Drawing a simple circle

If you want to get a quick overview, here’s how we can draw a simple circle:

`use iced::widget::canvas::{self, Canvas, Cursor, Fill, Frame, Geometry, Path, P
rogram};
use iced::{Color, Rectangle, Theme};

// First, we define the data we need for drawing
#[derive(Debug)]
struct Circle {
    radius: f32,
}

// Then, we implement the `Program` trait
impl Program<()> for Circle {
    type State = ();

    fn draw(&self, _state: &(), _theme: &Theme, bounds: Rectangle, _cursor: Curs
or) -> Vec<Geometry>{
        // We prepare a new `Frame`
        let mut frame = Frame::new(bounds.size());

        // We create a `Path` representing a simple circle
        let circle = Path::circle(frame.center(), self.radius);

        // And fill it with some color
        frame.fill(&circle, Color::BLACK);

        // Finally, we produce the geometry
        vec![frame.into_geometry()]
    }
}

// Finally, we simply use our `Circle` to create the `Canvas`!
let canvas = Canvas::new(Circle { radius: 50.0 });`
__________
__________

IMPLEMENTATIONS:
impl<Message, Theme, P> Canvas<Message, Theme, P> where P: Program<Message,
Theme>,
pub fn new(program: P) -> Canvas<Message, Theme, P>

Creates a new `Canvas`.
pub fn width(self, width: impl Into<Length>) -> Canvas<Message, Theme, P>

Sets the width of the `Canvas`.
pub fn height(self, height: impl Into<Length>) -> Canvas<Message, Theme, P>

Sets the height of the `Canvas`.
__________
__________

TRAITS:
impl<Message, Theme, P> Debug, impl<Message, P, B, T> Widget<Message, Renderer<B, T>>, impl<Message, Theme, P> RefUnwindSafe, impl<Message, Theme, P> Send, impl<Message, Theme, P> Sync
impl<Message, Theme, P> Unpin, impl<Message, Theme, P> UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::ProgressBar
`pub struct ProgressBar<Renderer>   where
    Renderer: Renderer,
    <Renderer as Renderer>::Theme: StyleSheet,{ /* private fields */ }`
A bar that displays progress.

__________

Example
`let value = 50.0;

ProgressBar::new(0.0..=100.0, value);`

[Progress bar drawn with iced_wgpu]
__________
__________

IMPLEMENTATIONS:
impl<Renderer> ProgressBar<Renderer> where Renderer: Renderer, <Renderer as
Renderer>::Theme: StyleSheet,
pub const DEFAULT_HEIGHT: f32 = 30f32

The default height of a `ProgressBar`.
pub fn new(range: RangeInclusive<f32>, value: f32) -> ProgressBar<Renderer>

Creates a new `ProgressBar`.

It expects:

* an inclusive range of possible values
* the current value of the `ProgressBar`
pub fn width(self, width: impl Into<Length>) -> ProgressBar<Renderer>

Sets the width of the `ProgressBar`.
pub fn height(self, height: impl Into<Length>) -> ProgressBar<Renderer>

Sets the height of the `ProgressBar`.
pub fn style( self, style: impl Into<<<Renderer as Renderer>::Theme as
StyleSheet>::Style> ) -> ProgressBar<Renderer>

Sets the style of the `ProgressBar`.
__________
__________

TRAITS:
impl<Message, Renderer> Widget<Message, Renderer>, impl<Renderer> RefUnwindSafe, impl<Renderer> Send, impl<Renderer> Sync, impl<Renderer> Unpin
impl<Renderer> UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::QRCode
`pub struct QRCode<'a> { /* private fields */ }`
Available on **crate feature `qr_code`** only.
A type of matrix barcode consisting of squares arranged in a grid which can be
read by an imaging device, such as a camera.
__________
__________

IMPLEMENTATIONS:
impl<'a> QRCode<'a>
pub fn new(state: &'a State) -> QRCode<'a>

Creates a new `QRCode` with the provided `State`.
pub fn color(self, dark: Color, light: Color) -> QRCode<'a>

Sets both the dark and light `Color`s of the `QRCode`.
pub fn cell_size(self, cell_size: u16) -> QRCode<'a>

Sets the size of the squares of the grid cell of the `QRCode`.
__________
__________

TRAITS:
impl<'a> Debug, impl<'a, Message, B, T> Widget<Message, Renderer<B, T>>, impl<'a> !RefUnwindSafe, impl<'a> !Send, impl<'a> !Sync
impl<'a> Unpin, impl<'a> !UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>




==============
Struct iced::widget::Rule
`pub struct Rule<Renderer>   where
    Renderer: Renderer,
    <Renderer as Renderer>::Theme: StyleSheet,{ /* private fields */ }`
Display a horizontal or vertical rule for dividing content.
__________
__________

IMPLEMENTATIONS:
impl<Renderer> Rule<Renderer> where Renderer: Renderer, <Renderer as
Renderer>::Theme: StyleSheet,
pub fn horizontal(height: impl Into<Pixels>) -> Rule<Renderer>

Creates a horizontal `Rule` with the given height.
pub fn vertical(width: impl Into<Pixels>) -> Rule<Renderer>

Creates a vertical `Rule` with the given width.
pub fn style( self, style: impl Into<<<Renderer as Renderer>::Theme as
StyleSheet>::Style> ) -> Rule<Renderer>

Sets the style of the `Rule`.
__________
__________

TRAITS:
impl<Message, Renderer> Widget<Message, Renderer>, impl<Renderer> RefUnwindSafe, impl<Renderer> Send, impl<Renderer> Sync, impl<Renderer> Unpin
impl<Renderer> UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::Slider
`pub struct Slider<'a, T, Message, Renderer> where
    Renderer: Renderer,
    <Renderer as Renderer>::Theme: StyleSheet,{ /* private fields */ }`
An horizontal bar and a handle that selects a single value from a range of
values.

A `Slider` will try to fill the horizontal space of its container.

The `Slider` range of numeric values is generic and its step size defaults to 1
unit.

__________

Example
`#[derive(Clone)]
pub enum Message {
    SliderChanged(f32),
}

let value = 50.0;

Slider::new(0.0..=100.0, value, Message::SliderChanged);`

[Slider drawn by Coffee’s renderer]
__________
__________

IMPLEMENTATIONS:
impl<'a, T, Message, Renderer> Slider<'a, T, Message, Renderer> where T: Copy +
From<u8> + PartialOrd<T>, Message: Clone, Renderer: Renderer, <Renderer as
Renderer>::Theme: StyleSheet,
pub const DEFAULT_HEIGHT: f32 = 22f32

The default height of a `Slider`.
pub fn new<F>( range: RangeInclusive<T>, value: T, on_change: F ) -> Slider<'a,
T, Message, Renderer> where F: 'a + Fn(T) -> Message,

Creates a new `Slider`.

It expects:

* an inclusive range of possible values
* the current value of the `Slider`
* a function that will be called when the `Slider` is dragged. It receives the
  new value of the `Slider` and must produce a `Message`.
pub fn on_release(self, on_release: Message) -> Slider<'a, T, Message, Renderer>

Sets the release message of the `Slider`. This is called when the mouse is
released from the slider.

Typically, the user’s interaction with the slider is finished when this message
is produced. This is useful if you need to spawn a long-running task from the
slider’s result, where the default on_change message could create too many
events.
pub fn width(self, width: impl Into<Length>) -> Slider<'a, T, Message, Renderer>

Sets the width of the `Slider`.
pub fn height( self, height: impl Into<Pixels> ) -> Slider<'a, T, Message,
Renderer>

Sets the height of the `Slider`.
pub fn style( self, style: impl Into<<<Renderer as Renderer>::Theme as
StyleSheet>::Style> ) -> Slider<'a, T, Message, Renderer>

Sets the style of the `Slider`.
pub fn step(self, step: T) -> Slider<'a, T, Message, Renderer>

Sets the step size of the `Slider`.
__________
__________

TRAITS:
impl<'a, T, Message, Renderer> Widget<Message, Renderer>, impl<'a, T, Message, Renderer> !RefUnwindSafe, impl<'a, T, Message, Renderer> !Send, impl<'a, T, Message, Renderer> !Sync, impl<'a, T, Message, Renderer> Unpin
impl<'a, T, Message, Renderer> !UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>




==============
Struct iced::widget::Space
`pub struct Space { /* private fields */ }`
An amount of empty space.

It can be useful if you want to fill some space with nothing.
__________
__________

IMPLEMENTATIONS:
impl Space
pub fn new(width: impl Into<Length>, height: impl Into<Length>) -> Space

Creates an amount of empty `Space` with the given width and height.
pub fn with_width(width: impl Into<Length>) -> Space

Creates an amount of horizontal `Space`.
pub fn with_height(height: impl Into<Length>) -> Space

Creates an amount of vertical `Space`.
__________
__________

TRAITS:
impl Debug, impl<Message, Renderer> Widget<Message, Renderer>, impl RefUnwindSafe, impl Send, impl Sync
impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::Svg
`pub struct Svg<Renderer>   where
    Renderer: Renderer,
    <Renderer as Renderer>::Theme: StyleSheet,{ /* private fields */ }`
Available on **crate feature `svg`** only.
A vector graphics image.

An `Svg` image resizes smoothly without losing any quality.

`Svg` images can have a considerable rendering cost when resized, specially when
they are complex.
__________
__________

IMPLEMENTATIONS:
impl<Renderer> Svg<Renderer> where Renderer: Renderer, <Renderer as
Renderer>::Theme: StyleSheet,
pub fn new(handle: impl Into<Handle>) -> Svg<Renderer>

Creates a new `Svg` from the given `Handle`.
pub fn from_path(path: impl Into<PathBuf>) -> Svg<Renderer>

Creates a new `Svg` that will display the contents of the file at the provided
path.
pub fn width(self, width: impl Into<Length>) -> Svg<Renderer>

Sets the width of the `Svg`.
pub fn height(self, height: impl Into<Length>) -> Svg<Renderer>

Sets the height of the `Svg`.
pub fn content_fit(self, content_fit: ContentFit) -> Svg<Renderer>

Sets the `ContentFit` of the `Svg`.

Defaults to `ContentFit::Contain`
pub fn style( self, style: <<Renderer as Renderer>::Theme as StyleSheet>::Style
) -> Svg<Renderer>

Sets the style variant of this `Svg`.
__________
__________

TRAITS:
impl<Message, Renderer> Widget<Message, Renderer>, impl<Renderer> RefUnwindSafe, impl<Renderer> Send, impl<Renderer> Sync, impl<Renderer> Unpin
impl<Renderer> UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::VerticalSlider
`pub struct VerticalSlider<'a, T, Message, Renderer> where
    Renderer: Renderer,
    <Renderer as Renderer>::Theme: StyleSheet,{ /* private fields */ }`
An vertical bar and a handle that selects a single value from a range of values.

A `VerticalSlider` will try to fill the vertical space of its container.

The `VerticalSlider` range of numeric values is generic and its step size
defaults to 1 unit.

__________

Example
`#[derive(Clone)]
pub enum Message {
    SliderChanged(f32),
}

let value = 50.0;

VerticalSlider::new(0.0..=100.0, value, Message::SliderChanged);`
__________
__________

IMPLEMENTATIONS:
impl<'a, T, Message, Renderer> VerticalSlider<'a, T, Message, Renderer> where T:
Copy + From<u8> + PartialOrd<T>, Message: Clone, Renderer: Renderer, <Renderer
as Renderer>::Theme: StyleSheet,
pub const DEFAULT_WIDTH: f32 = 22f32

The default width of a `VerticalSlider`.
pub fn new<F>( range: RangeInclusive<T>, value: T, on_change: F ) ->
VerticalSlider<'a, T, Message, Renderer> where F: 'a + Fn(T) -> Message,

Creates a new `VerticalSlider`.

It expects:

* an inclusive range of possible values
* the current value of the `VerticalSlider`
* a function that will be called when the `VerticalSlider` is dragged. It
  receives the new value of the `VerticalSlider` and must produce a `Message`.
pub fn on_release( self, on_release: Message ) -> VerticalSlider<'a, T, Message,
Renderer>

Sets the release message of the `VerticalSlider`. This is called when the mouse
is released from the slider.

Typically, the user’s interaction with the slider is finished when this message
is produced. This is useful if you need to spawn a long-running task from the
slider’s result, where the default on_change message could create too many
events.
pub fn width( self, width: impl Into<Pixels> ) -> VerticalSlider<'a, T, Message,
Renderer>

Sets the width of the `VerticalSlider`.
pub fn height( self, height: impl Into<Length> ) -> VerticalSlider<'a, T,
Message, Renderer>

Sets the height of the `VerticalSlider`.
pub fn style( self, style: impl Into<<<Renderer as Renderer>::Theme as
StyleSheet>::Style> ) -> VerticalSlider<'a, T, Message, Renderer>

Sets the style of the `VerticalSlider`.
pub fn step(self, step: T) -> VerticalSlider<'a, T, Message, Renderer>

Sets the step size of the `VerticalSlider`.
__________
__________

TRAITS:
impl<'a, T, Message, Renderer> Widget<Message, Renderer>, impl<'a, T, Message, Renderer> !RefUnwindSafe, impl<'a, T, Message, Renderer> !Send, impl<'a, T, Message, Renderer> !Sync, impl<'a, T, Message, Renderer> Unpin
impl<'a, T, Message, Renderer> !UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>




==============
Struct iced::widget::svg::Appearance
[−]
`pub struct Appearance {
    pub color: Option<Color>,
}`
Available on **crate feature `svg`** only.
The appearance of an SVG.
__________

Fields

`color: Option<Color>`

The `Color` filter of an SVG.

Useful for coloring a symbolic icon.

`None` keeps the original color.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Default, impl Copy, impl RefUnwindSafe
impl Send, impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<R, P> ReadPrimitive<R>
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::svg::Handle
`pub struct Handle { /* private fields */ }`
Available on **crate feature `svg`** only.
A handle of Svg data.
__________
__________

IMPLEMENTATIONS:
impl Handle
pub fn from_path(path: impl Into<PathBuf>) -> Handle

Creates an SVG `Handle` pointing to the vector image of the given path.
pub fn from_memory(bytes: impl Into<Cow<'static, [u8]>>) -> Handle

Creates an SVG `Handle` from raw bytes containing either an SVG string or gzip
compressed data.

This is useful if you already have your SVG data in-memory, maybe because you
downloaded or generated it procedurally.
pub fn id(&self) -> u64

Returns the unique identifier of the `Handle`.
pub fn data(&self) -> &Data

Returns a reference to the SVG `Data`.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Hash, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> CallHasher, impl<T> Downcast<T>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned
impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>
impl<T> MaybeSend




==============
Struct iced::widget::svg::Svg
`pub struct Svg<Renderer>   where
    Renderer: Renderer,
    <Renderer as Renderer>::Theme: StyleSheet,{ /* private fields */ }`
Available on **crate feature `svg`** only.
A vector graphics image.

An `Svg` image resizes smoothly without losing any quality.

`Svg` images can have a considerable rendering cost when resized, specially when
they are complex.
__________
__________

IMPLEMENTATIONS:
impl<Renderer> Svg<Renderer> where Renderer: Renderer, <Renderer as
Renderer>::Theme: StyleSheet,
pub fn new(handle: impl Into<Handle>) -> Svg<Renderer>

Creates a new `Svg` from the given `Handle`.
pub fn from_path(path: impl Into<PathBuf>) -> Svg<Renderer>

Creates a new `Svg` that will display the contents of the file at the provided
path.
pub fn width(self, width: impl Into<Length>) -> Svg<Renderer>

Sets the width of the `Svg`.
pub fn height(self, height: impl Into<Length>) -> Svg<Renderer>

Sets the height of the `Svg`.
pub fn content_fit(self, content_fit: ContentFit) -> Svg<Renderer>

Sets the `ContentFit` of the `Svg`.

Defaults to `ContentFit::Contain`
pub fn style( self, style: <<Renderer as Renderer>::Theme as StyleSheet>::Style
) -> Svg<Renderer>

Sets the style variant of this `Svg`.
__________
__________

TRAITS:
impl<Message, Renderer> Widget<Message, Renderer>, impl<Renderer> RefUnwindSafe, impl<Renderer> Send, impl<Renderer> Sync, impl<Renderer> Unpin
impl<Renderer> UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Trait iced::widget::svg::StyleSheet


[−]
`pub trait StyleSheet {
    type Style: Default;

    // Required method
    fn appearance(&self, style: &Self::Style) -> Appearance;
}`
Available on **crate feature `svg`** only.


The stylesheet of a svg.


__________

Required Associated Types



type Style: Default

The supported style of the `StyleSheet`.


__________

Required Methods



fn appearance(&self, style: &Self::Style) -> Appearance

Produces the `Appearance` of the svg.


__________

Implementations on Foreign Types




impl StyleSheet for fn(_: &Theme) -> Appearance

type Style = Theme

fn appearance( &self, style: &<fn(_: &Theme) -> Appearance as StyleSheet>::Style
) -> Appearance


__________

Implementors




impl StyleSheet for Theme

type Style = Svg




==============
Struct iced::widget::text::Appearance
[−]
`pub struct Appearance {
    pub color: Option<Color>,
}`
The apperance of some text.
__________

Fields

`color: Option<Color>`

The `Color` of the text.

The default, `None`, means using the inherited color.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Default, impl Copy, impl RefUnwindSafe
impl Send, impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<R, P> ReadPrimitive<R>
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Trait iced::widget::text::StyleSheet


[−]
`pub trait StyleSheet {
    type Style: Default + Copy;

    // Required method
    fn appearance(&self, style: Self::Style) -> Appearance;
}`


The style sheet of some text.


__________

Required Associated Types



type Style: Default + Copy

The supported style of the `StyleSheet`.


__________

Required Methods



fn appearance(&self, style: Self::Style) -> Appearance

Produces the `Appearance` of some text.


__________

Implementors




impl StyleSheet for Theme

type Style = Text




==============
Type Definition iced::widget::text::Text


`pub type Text<'a, Renderer = Renderer> = Text<'a, Renderer>;`


A paragraph of text.




==============
Enum iced::widget::text_input::Side
`pub enum Side {
    Left,
    Right,
}`
The side of a `TextInput`.
__________

Variants


Left

The left side of a `TextInput`.

Right

The right side of a `TextInput`.
__________
__________

TRAITS:
impl Clone, impl Debug, impl RefUnwindSafe, impl Send, impl Sync
impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>
impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::text_input::Appearance
[−]
`pub struct Appearance {
    pub background: Background,
    pub border_radius: f32,
    pub border_width: f32,
    pub border_color: Color,
    pub icon_color: Color,
}`
The appearance of a text input.
__________

Fields

`background: Background`

The `Background` of the text input.
`border_radius: f32`

The border radius of the text input.
`border_width: f32`

The border width of the text input.
`border_color: Color`

The border `Color` of the text input.
`icon_color: Color`

The icon `Color` of the text input.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Copy, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::text_input::Icon
`pub struct Icon<Font> {
    pub font: Font,
    pub code_point: char,
    pub size: Option<f32>,
    pub spacing: f32,
    pub side: Side,
}`
The content of the `Icon`.
__________

Fields

`font: Font`

The font that will be used to display the `code_point`.
`code_point: char`

The unicode code point that will be used as the icon.
`size: Option<f32>`

The font size of the content.
`spacing: f32`

The spacing between the `Icon` and the text in a `TextInput`.
`side: Side`

The side of a `TextInput` where to display the `Icon`.
__________
__________

TRAITS:
impl<Font> Clone, impl<Font> Debug, impl<Font> RefUnwindSafe, impl<Font> Send, impl<Font> Sync
impl<Font> Unpin, impl<Font> UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>
impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::text_input::Id
`pub struct Id(_);`
The identifier of a `TextInput`.
__________
__________

IMPLEMENTATIONS:
impl Id
pub fn new(id: impl Into<Cow<'static, str>>) -> Id

Creates a custom `Id`.
pub fn unique() -> Id

Creates a unique `Id`.

This function produces a different `Id` every time it is called.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Hash, impl PartialEq<Id>, impl Eq
impl StructuralEq, impl StructuralPartialEq, impl RefUnwindSafe, impl Send, impl Sync
impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> CallHasher, impl<T> Downcast<T>, impl<Q, K> Equivalent<K>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned
impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>
impl<T> MaybeSend




==============
Trait iced::widget::text_input::StyleSheet


[−]
`pub trait StyleSheet {
    type Style: Default;

    // Required methods
    fn active(&self, style: &Self::Style) -> Appearance;
    fn focused(&self, style: &Self::Style) -> Appearance;
    fn placeholder_color(&self, style: &Self::Style) -> Color;
    fn value_color(&self, style: &Self::Style) -> Color;
    fn disabled_color(&self, style: &Self::Style) -> Color;
    fn selection_color(&self, style: &Self::Style) -> Color;
    fn disabled(&self, style: &Self::Style) -> Appearance;

    // Provided method
    fn hovered(&self, style: &Self::Style) -> Appearance { ... }
}`


A set of rules that dictate the style of a text input.


__________

Required Associated Types



type Style: Default

The supported style of the `StyleSheet`.


__________

Required Methods



fn active(&self, style: &Self::Style) -> Appearance

Produces the style of an active text input.


fn focused(&self, style: &Self::Style) -> Appearance

Produces the style of a focused text input.


fn placeholder_color(&self, style: &Self::Style) -> Color

Produces the `Color` of the placeholder of a text input.


fn value_color(&self, style: &Self::Style) -> Color

Produces the `Color` of the value of a text input.


fn disabled_color(&self, style: &Self::Style) -> Color

Produces the `Color` of the value of a disabled text input.


fn selection_color(&self, style: &Self::Style) -> Color

Produces the `Color` of the selection of a text input.


fn disabled(&self, style: &Self::Style) -> Appearance

Produces the style of a disabled text input.


__________

Provided Methods



fn hovered(&self, style: &Self::Style) -> Appearance

Produces the style of an hovered text input.


__________

Implementors




impl StyleSheet for Theme

type Style = TextInput




==============
Type Definition iced::widget::text_input::TextInput


`pub type TextInput<'a, Message, Renderer = Renderer> = TextInput<'a, Message, R
enderer>;`


A field that can be filled with text.




==============
Struct iced::widget::toggler::Appearance
[−]
`pub struct Appearance {
    pub background: Color,
    pub background_border: Option<Color>,
    pub foreground: Color,
    pub foreground_border: Option<Color>,
}`
The appearance of a toggler.
__________

Fields

`background: Color`

The background `Color` of the toggler.
`background_border: Option<Color>`

The `Color` of the background border of the toggler.
`foreground: Color`

The foreground `Color` of the toggler.
`foreground_border: Option<Color>`

The `Color` of the foreground border of the toggler.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Copy, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Trait iced::widget::toggler::StyleSheet


[−]
`pub trait StyleSheet {
    type Style: Default;

    // Required methods
    fn active(&self, style: &Self::Style, is_active: bool) -> Appearance;
    fn hovered(&self, style: &Self::Style, is_active: bool) -> Appearance;
}`


A set of rules that dictate the style of a toggler.


__________

Required Associated Types



type Style: Default

The supported style of the `StyleSheet`.


__________

Required Methods



fn active(&self, style: &Self::Style, is_active: bool) -> Appearance

Returns the active `Appearance` of the toggler for the provided `Style`.


fn hovered(&self, style: &Self::Style, is_active: bool) -> Appearance

Returns the hovered `Appearance` of the toggler for the provided `Style`.


__________

Implementors




impl StyleSheet for Theme

type Style = Toggler




==============
Type Definition iced::widget::toggler::Toggler


`pub type Toggler<'a, Message, Renderer = Renderer> = Toggler<'a, Message, Rende
rer>;`


A toggler widget.




==============
Enum iced::widget::tooltip::Position
`pub enum Position {
    FollowCursor,
    Top,
    Bottom,
    Left,
    Right,
}`
The position of the tooltip. Defaults to following the cursor.
__________

Variants


FollowCursor

The tooltip will follow the cursor.

Top

The tooltip will appear on the top of the widget.

Bottom

The tooltip will appear on the bottom of the widget.

Left

The tooltip will appear on the left of the widget.

Right

The tooltip will appear on the right of the widget.
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<Position>, impl Copy, impl Eq
impl StructuralEq, impl StructuralPartialEq, impl RefUnwindSafe, impl Send, impl Sync
impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<Q, K> Equivalent<K>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Type Definition iced::widget::tooltip::Tooltip


`pub type Tooltip<'a, Message, Renderer = Renderer> = Tooltip<'a, Message, Rende
rer>;`


A widget allowing the selection of a single value from a list of options.




==============
Type Definition iced::widget::Column


`pub type Column<'a, Message, Renderer = Renderer> = Column<'a, Message, Rendere
r>;`


A container that distributes its contents vertically.




==============
Type Definition iced::widget::Row


`pub type Row<'a, Message, Renderer = Renderer> = Row<'a, Message, Renderer>;`


A container that distributes its contents horizontally.




==============
Enum iced::widget::vertical_slider::HandleShape
[−]
`pub enum HandleShape {
    Circle {
        radius: f32,
    },
    Rectangle {
        width: u16,
        border_radius: f32,
    },
}`
The shape of the handle of a slider.
__________

Variants


Circle
#### Fields
`radius: f32`

The radius of the circle.

A circular handle.

Rectangle
#### Fields
`width: u16`

The width of the rectangle.
`border_radius: f32`

The border radius of the corners of the rectangle.

A rectangular shape.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Copy, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::vertical_slider::Appearance
[−]
`pub struct Appearance {
    pub rail: Rail,
    pub handle: Handle,
}`
The appearance of a slider.
__________

Fields

`rail: Rail`

The colors of the rail of the slider.
`handle: Handle`

The appearance of the `Handle` of the slider.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Copy, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::vertical_slider::Handle
[−]
`pub struct Handle {
    pub shape: HandleShape,
    pub color: Color,
    pub border_width: f32,
    pub border_color: Color,
}`
The appearance of the handle of a slider.
__________

Fields

`shape: HandleShape`

The shape of the handle.
`color: Color`

The `Color` of the handle.
`border_width: f32`

The border width of the handle.
`border_color: Color`

The border `Color` of the handle.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Copy, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::vertical_slider::State
`pub struct State { /* private fields */ }`
The local state of a `VerticalSlider`.
__________
__________

IMPLEMENTATIONS:
impl State
pub fn new() -> State

Creates a new `State`.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Default, impl PartialEq<State>, impl Copy
impl Eq, impl StructuralEq, impl StructuralPartialEq, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<Q, K> Equivalent<K>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> IsDefault, impl<T> Pointable
impl<R, P> ReadPrimitive<R>, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::widget::vertical_slider::VerticalSlider
`pub struct VerticalSlider<'a, T, Message, Renderer> where
    Renderer: Renderer,
    <Renderer as Renderer>::Theme: StyleSheet,{ /* private fields */ }`
An vertical bar and a handle that selects a single value from a range of values.

A `VerticalSlider` will try to fill the vertical space of its container.

The `VerticalSlider` range of numeric values is generic and its step size
defaults to 1 unit.

__________

Example
`#[derive(Clone)]
pub enum Message {
    SliderChanged(f32),
}

let value = 50.0;

VerticalSlider::new(0.0..=100.0, value, Message::SliderChanged);`
__________
__________

IMPLEMENTATIONS:
impl<'a, T, Message, Renderer> VerticalSlider<'a, T, Message, Renderer> where T:
Copy + From<u8> + PartialOrd<T>, Message: Clone, Renderer: Renderer, <Renderer
as Renderer>::Theme: StyleSheet,
pub const DEFAULT_WIDTH: f32 = 22f32

The default width of a `VerticalSlider`.
pub fn new<F>( range: RangeInclusive<T>, value: T, on_change: F ) ->
VerticalSlider<'a, T, Message, Renderer> where F: 'a + Fn(T) -> Message,

Creates a new `VerticalSlider`.

It expects:

* an inclusive range of possible values
* the current value of the `VerticalSlider`
* a function that will be called when the `VerticalSlider` is dragged. It
  receives the new value of the `VerticalSlider` and must produce a `Message`.
pub fn on_release( self, on_release: Message ) -> VerticalSlider<'a, T, Message,
Renderer>

Sets the release message of the `VerticalSlider`. This is called when the mouse
is released from the slider.

Typically, the user’s interaction with the slider is finished when this message
is produced. This is useful if you need to spawn a long-running task from the
slider’s result, where the default on_change message could create too many
events.
pub fn width( self, width: impl Into<Pixels> ) -> VerticalSlider<'a, T, Message,
Renderer>

Sets the width of the `VerticalSlider`.
pub fn height( self, height: impl Into<Length> ) -> VerticalSlider<'a, T,
Message, Renderer>

Sets the height of the `VerticalSlider`.
pub fn style( self, style: impl Into<<<Renderer as Renderer>::Theme as
StyleSheet>::Style> ) -> VerticalSlider<'a, T, Message, Renderer>

Sets the style of the `VerticalSlider`.
pub fn step(self, step: T) -> VerticalSlider<'a, T, Message, Renderer>

Sets the step size of the `VerticalSlider`.
__________
__________

TRAITS:
impl<'a, T, Message, Renderer> Widget<Message, Renderer>, impl<'a, T, Message, Renderer> !RefUnwindSafe, impl<'a, T, Message, Renderer> !Send, impl<'a, T, Message, Renderer> !Sync, impl<'a, T, Message, Renderer> Unpin
impl<'a, T, Message, Renderer> !UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>




==============
Trait iced::widget::vertical_slider::StyleSheet


[−]
`pub trait StyleSheet {
    type Style: Default;

    // Required methods
    fn active(&self, style: &Self::Style) -> Appearance;
    fn hovered(&self, style: &Self::Style) -> Appearance;
    fn dragging(&self, style: &Self::Style) -> Appearance;
}`


A set of rules that dictate the style of a slider.


__________

Required Associated Types



type Style: Default

The supported style of the `StyleSheet`.


__________

Required Methods



fn active(&self, style: &Self::Style) -> Appearance

Produces the style of an active slider.


fn hovered(&self, style: &Self::Style) -> Appearance

Produces the style of an hovered slider.


fn dragging(&self, style: &Self::Style) -> Appearance

Produces the style of a slider that is being dragged.


__________

Implementors




impl StyleSheet for Theme

type Style = Slider




==============
Enum iced::window::Event
`pub enum Event {
    Moved {
        x: i32,
        y: i32,
    },
    Resized {
        width: u32,
        height: u32,
    },
    RedrawRequested(Instant),
    CloseRequested,
    Focused,
    Unfocused,
    FileHovered(PathBuf),
    FileDropped(PathBuf),
    FilesHoveredLeft,
}`
A window-related event.
__________

Variants


Moved
#### Fields
`x: i32`

The new logical x location of the window
`y: i32`

The new logical y location of the window

A window was moved.

Resized
#### Fields
`width: u32`

The new logical width of the window
`height: u32`

The new logical height of the window

A window was resized.

RedrawRequested(Instant)

A window redraw was requested.

The `Instant` contains the current time.

CloseRequested

The user has requested for the window to close.

Usually, you will want to terminate the execution whenever this event occurs.

Focused

A window was focused.

Unfocused

A window was unfocused.

FileHovered(PathBuf)

A file is being hovered over the window.

When the user hovers multiple files at once, this event will be emitted for each
file separately.

FileDropped(PathBuf)

A file has beend dropped into the window.

When the user drops multiple files at once, this event will be emitted for each
file separately.

FilesHoveredLeft

A file was hovered, but has exited the window.

There will be a single `FilesHoveredLeft` event triggered even if multiple files
were hovered.
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<Event>, impl Eq, impl StructuralEq
impl StructuralPartialEq, impl RefUnwindSafe, impl Send, impl Sync, impl Unpin
impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<Q, K> Equivalent<K>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>
impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::window::Mode
`pub enum Mode {
    Windowed,
    Fullscreen,
    Hidden,
}`
The mode of a window-based application.
__________

Variants


Windowed

The application appears in its own window.

Fullscreen

The application takes the whole screen of its current monitor.

Hidden

The application is hidden
__________
__________

TRAITS:
impl Clone, impl Debug, impl PartialEq<Mode>, impl Copy, impl Eq
impl StructuralEq, impl StructuralPartialEq, impl RefUnwindSafe, impl Send, impl Sync
impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<Q, K> Equivalent<K>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::window::Position
`pub enum Position {
    Default,
    Centered,
    Specific(i32, i32),
}`
The position of a window in a given screen.
__________

Variants


Default

The platform-specific default position for a new window.

Centered

The window is completely centered on the screen.

Specific(i32, i32)

The window is positioned with specific coordinates: `(X, Y)`.

When the decorations of the window are enabled, Windows 10 will add some
invisible padding to the window. This padding gets included in the position. So
if you have decorations enabled and want the window to be at (0, 0) you would
have to set the position to `(PADDING_X, PADDING_Y)`.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Default, impl From<Position>, impl PartialEq<Position>
impl Copy, impl Eq, impl StructuralEq, impl StructuralPartialEq, impl RefUnwindSafe
impl Send, impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<Q, K> Equivalent<K>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> IsDefault
impl<T> Pointable, impl<R, P> ReadPrimitive<R>, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>
impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::window::RedrawRequest
`pub enum RedrawRequest {
    NextFrame,
    At(Instant),
}`
A request to redraw a window.
__________

Variants


NextFrame

Redraw the next frame.

At(Instant)

Redraw at the given time.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Ord, impl PartialEq<RedrawRequest>, impl PartialOrd<RedrawRequest>
impl Copy, impl Eq, impl StructuralEq, impl StructuralPartialEq, impl RefUnwindSafe
impl Send, impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<Q, K> Equivalent<K>
impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::window::UserAttention
`pub enum UserAttention {
    Critical,
    Informational,
}`
The type of user attention to request.

### Platform-specific

* **X11:** Sets the WM’s `XUrgencyHint`. No distinction between `Critical` and
  `Informational`.
__________

Variants


Critical
Platform-specific

* **macOS:** Bounces the dock icon until the application is in focus.
* **Windows:** Flashes both the window and the taskbar button until the
  application is in focus.

Informational
Platform-specific

* **macOS:** Bounces the dock icon once.
* **Windows:** Flashes the taskbar button until the application is in focus.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Copy, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>
impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>
impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Enum iced::window::icon::Error
`pub enum Error {
    InvalidError(Error),
    OsError(Error),
    ImageError(ImageError),
}`
An error produced when creating an `Icon`.
__________

Variants


InvalidError(Error)

The `Icon` is not valid.

OsError(Error)

The underlying OS failed to create the icon.

ImageError(ImageError)
Available on **crate feature `image`** only.

The `image` crate reported an error.
__________
__________

TRAITS:
impl Debug, impl Display, impl Error, impl From<Error>, impl From<Error>
impl From<ImageError>, impl !RefUnwindSafe, impl Send, impl Sync, impl Unpin
impl !UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>
impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>
impl<T> Pointable, impl<E> Provider, impl<T> ToString, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>
impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::window::icon::Icon
`pub struct Icon { /* private fields */ }`
An window icon normally used for the titlebar or taskbar.
__________
__________

IMPLEMENTATIONS:
impl Icon
pub fn into_raw(self) -> (Vec<u8, Global>, Size<u32>)

Returns the raw data of the `Icon`.
__________
__________

TRAITS:
impl Clone, impl Debug, impl RefUnwindSafe, impl Send, impl Sync
impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>
impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::window::Icon
`pub struct Icon { /* private fields */ }`
An window icon normally used for the titlebar or taskbar.
__________
__________

IMPLEMENTATIONS:
impl Icon
pub fn into_raw(self) -> (Vec<u8, Global>, Size<u32>)

Returns the raw data of the `Icon`.
__________
__________

TRAITS:
impl Clone, impl Debug, impl RefUnwindSafe, impl Send, impl Sync
impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any, impl<T> Borrow<T>
impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>, impl<T, U> Into<U>, impl<T, U> IntoColor<U>
impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>
impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::window::PlatformSpecific
`pub struct PlatformSpecific;`
The platform specific window settings of an application.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Default, impl PartialEq<Plat, impl Copy
impl Eq, impl StructuralEq, impl StructuralPartialEq, impl RefUnwindSafe, impl Send
impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>, impl<T> Any
impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<Q, K> Equivalent<K>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> IsDefault, impl<T> Pointable
impl<R, P> ReadPrimitive<R>, impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>
impl<T> Upcast<T>, impl<V, T> VZip<V>, impl<T> MaybeSend




==============
Struct iced::window::Settings
`pub struct Settings {
    pub size: (u32, u32),
    pub position: Position,
    pub min_size: Option<(u32, u32)>,
    pub max_size: Option<(u32, u32)>,
    pub visible: bool,
    pub resizable: bool,
    pub decorations: bool,
    pub transparent: bool,
    pub always_on_top: bool,
    pub icon: Option<Icon>,
    pub platform_specific: PlatformSpecific,
}`
The window settings of an application.
__________

Fields

`size: (u32, u32)`

The initial size of the window.
`position: Position`

The initial position of the window.
`min_size: Option<(u32, u32)>`

The minimum size of the window.
`max_size: Option<(u32, u32)>`

The maximum size of the window.
`visible: bool`

Whether the window should be visible or not.
`resizable: bool`

Whether the window should be resizable or not.
`decorations: bool`

Whether the window should have a border, a title bar, etc. or not.
`transparent: bool`

Whether the window should be transparent.
`always_on_top: bool`

Whether the window will always be on top of other windows.
`icon: Option<Icon>`

The icon of the window.
`platform_specific: PlatformSpecific`

Platform specific settings.
__________
__________

TRAITS:
impl Clone, impl Debug, impl Default, impl From<Settings>, impl RefUnwindSafe
impl Send, impl Sync, impl Unpin, impl UnwindSafe, impl<S, D, Swp, Dwp, T> AdaptInto<D, Swp, Dwp, T>
impl<T> Any, impl<T> Borrow<T>, impl<T> BorrowMut<T>, impl<T> Downcast<T>, impl<T> From<T>
impl<T, U> Into<U>, impl<T, U> IntoColor<U>, impl<T, U> IntoColorUnclamped<U>, impl<T> Pointable, impl<R, P> ReadPrimitive<R>
impl<T> ToOwned, impl<T, U> TryFrom<U>, impl<T, U> TryInto<U>, impl<T, U> TryIntoColor<U>, impl<T> Upcast<T>
impl<V, T> VZip<V>, impl<T> MaybeSend